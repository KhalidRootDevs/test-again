
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.15.0
 * Query Engine version: 8fbc245156db7124f997f4cecdd8d1219e360944
 */
Prisma.prismaVersion = {
  client: "4.15.0",
  engine: "8fbc245156db7124f997f4cecdd8d1219e360944"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.AppSettingsScalarFieldEnum = {
  id: 'id',
  notificationType: 'notificationType',
  name: 'name',
  oneSignalAppID: 'oneSignalAppID',
  oneSignalApiKey: 'oneSignalApiKey',
  firebaseServerKey: 'firebaseServerKey',
  firebaseTopics: 'firebaseTopics',
  sportsApiBasedUrl: 'sportsApiBasedUrl',
  sportsApiKey: 'sportsApiKey',
  androidSettings: 'androidSettings',
  iosSettings: 'iosSettings'
};

exports.Prisma.HighlightScalarFieldEnum = {
  id: 'id',
  fixtureId: 'fixtureId',
  title: 'title',
  shortDescription: 'shortDescription',
  status: 'status',
  youtubeUrl: 'youtubeUrl',
  youtubeThumbnail: 'youtubeThumbnail',
  videoType: 'videoType',
  thumbnailType: 'thumbnailType',
  imageUrl: 'imageUrl',
  imageFile: 'imageFile'
};

exports.Prisma.MatchScalarFieldEnum = {
  id: 'id',
  fixtureId: 'fixtureId',
  matchTime: 'matchTime',
  matchTitle: 'matchTitle',
  teamOneName: 'teamOneName',
  teamOneImage: 'teamOneImage',
  teamTwoName: 'teamTwoName',
  teamTwoImage: 'teamTwoImage',
  matchStatus: 'matchStatus'
};

exports.Prisma.NewsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  image: 'image',
  date: 'date'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.StreamScalarFieldEnum = {
  id: 'id',
  matchId: 'matchId',
  streamTitle: 'streamTitle',
  isPremium: 'isPremium',
  resulation: 'resulation',
  platform: 'platform',
  portraitWatermark: 'portraitWatermark',
  landscapeWatermark: 'landscapeWatermark',
  streamType: 'streamType',
  streamUrl: 'streamUrl',
  headers: 'headers',
  streamKey: 'streamKey'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  adminType: 'adminType',
  emailVerified: 'emailVerified',
  image: 'image',
  salt: 'salt',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};
exports.NotificationType = {
  OneSignal: 'OneSignal',
  FCM: 'FCM'
};

exports.StreamType = {
  OwnStream: 'OwnStream',
  Restricted: 'Restricted',
  M3u8: 'M3u8',
  Web: 'Web'
};

exports.ThumbnailType = {
  None: 'None',
  Url: 'Url',
  Image: 'Image'
};

exports.VideoType = {
  None: 'None',
  Youtube: 'Youtube',
  Sportmonk: 'Sportmonk'
};

exports.Prisma.ModelName = {
  User: 'User',
  Match: 'Match',
  Stream: 'Stream',
  Highlight: 'Highlight',
  AppSettings: 'AppSettings',
  News: 'News'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
