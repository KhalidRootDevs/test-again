
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = {
  id: string
  name: string | null
  email: string
  password: string
  adminType: string | null
  emailVerified: Date | null
  image: string | null
  salt: string | null
  status: boolean
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Match
 * 
 */
export type Match = {
  id: string
  fixtureId: string | null
  matchTime: string
  matchTitle: string
  teamOneName: string
  teamOneImage: string
  teamTwoName: string
  teamTwoImage: string
  matchStatus: boolean
}

/**
 * Model Stream
 * 
 */
export type Stream = {
  id: string
  matchId: string
  streamTitle: string
  isPremium: boolean
  resulation: string
  platform: string
  portraitWatermark: string
  landscapeWatermark: string
  streamType: StreamType
  streamUrl: string | null
  headers: string | null
  streamKey: string | null
}

/**
 * Model Highlight
 * 
 */
export type Highlight = {
  id: string
  fixtureId: string | null
  title: string
  shortDescription: string | null
  status: boolean
  youtubeUrl: string | null
  youtubeThumbnail: string | null
  videoType: VideoType
  thumbnailType: ThumbnailType
  imageUrl: string | null
  imageFile: string | null
}

/**
 * Model AppSettings
 * 
 */
export type AppSettings = {
  id: string
  notificationType: NotificationType
  name: string
  oneSignalAppID: string | null
  oneSignalApiKey: string | null
  firebaseServerKey: string | null
  firebaseTopics: string | null
  sportsApiBasedUrl: string | null
  sportsApiKey: string | null
  androidSettings: Prisma.JsonValue | null
  iosSettings: Prisma.JsonValue | null
}

/**
 * Model News
 * 
 */
export type News = {
  id: string
  title: string
  image: string
  date: Date | null
}


/**
 * Enums
 */

export const NotificationType: {
  OneSignal: 'OneSignal',
  FCM: 'FCM'
};

export type NotificationType = (typeof NotificationType)[keyof typeof NotificationType]


export const StreamType: {
  OwnStream: 'OwnStream',
  Restricted: 'Restricted',
  M3u8: 'M3u8',
  Web: 'Web'
};

export type StreamType = (typeof StreamType)[keyof typeof StreamType]


export const ThumbnailType: {
  None: 'None',
  Url: 'Url',
  Image: 'Image'
};

export type ThumbnailType = (typeof ThumbnailType)[keyof typeof ThumbnailType]


export const VideoType: {
  None: 'None',
  Youtube: 'Youtube',
  Sportmonk: 'Sportmonk'
};

export type VideoType = (typeof VideoType)[keyof typeof VideoType]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number }): Promise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.match`: Exposes CRUD operations for the **Match** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Matches
    * const matches = await prisma.match.findMany()
    * ```
    */
  get match(): Prisma.MatchDelegate<GlobalReject>;

  /**
   * `prisma.stream`: Exposes CRUD operations for the **Stream** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Streams
    * const streams = await prisma.stream.findMany()
    * ```
    */
  get stream(): Prisma.StreamDelegate<GlobalReject>;

  /**
   * `prisma.highlight`: Exposes CRUD operations for the **Highlight** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Highlights
    * const highlights = await prisma.highlight.findMany()
    * ```
    */
  get highlight(): Prisma.HighlightDelegate<GlobalReject>;

  /**
   * `prisma.appSettings`: Exposes CRUD operations for the **AppSettings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AppSettings
    * const appSettings = await prisma.appSettings.findMany()
    * ```
    */
  get appSettings(): Prisma.AppSettingsDelegate<GlobalReject>;

  /**
   * `prisma.news`: Exposes CRUD operations for the **News** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more News
    * const news = await prisma.news.findMany()
    * ```
    */
  get news(): Prisma.NewsDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.15.0
   * Query Engine version: 8fbc245156db7124f997f4cecdd8d1219e360944
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Match: 'Match',
    Stream: 'Stream',
    Highlight: 'Highlight',
    AppSettings: 'AppSettings',
    News: 'News'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type MatchCountOutputType
   */


  export type MatchCountOutputType = {
    streamingSources: number
  }

  export type MatchCountOutputTypeSelect = {
    streamingSources?: boolean
  }

  export type MatchCountOutputTypeGetPayload<S extends boolean | null | undefined | MatchCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? MatchCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (MatchCountOutputTypeArgs)
    ? MatchCountOutputType 
    : S extends { select: any } & (MatchCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof MatchCountOutputType ? MatchCountOutputType[P] : never
  } 
      : MatchCountOutputType




  // Custom InputTypes

  /**
   * MatchCountOutputType without action
   */
  export type MatchCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the MatchCountOutputType
     */
    select?: MatchCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    adminType: string | null
    emailVerified: Date | null
    image: string | null
    salt: string | null
    status: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    adminType: string | null
    emailVerified: Date | null
    image: string | null
    salt: string | null
    status: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    adminType: number
    emailVerified: number
    image: number
    salt: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    adminType?: true
    emailVerified?: true
    image?: true
    salt?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    adminType?: true
    emailVerified?: true
    image?: true
    salt?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    adminType?: true
    emailVerified?: true
    image?: true
    salt?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    name: string | null
    email: string
    password: string
    adminType: string | null
    emailVerified: Date | null
    image: string | null
    salt: string | null
    status: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    adminType?: boolean
    emailVerified?: boolean
    image?: boolean
    salt?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * @param {UserFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const user = await prisma.user.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: UserFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a User.
     * @param {UserAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const user = await prisma.user.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: UserAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User findRaw
   */
  export type UserFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * User aggregateRaw
   */
  export type UserAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
  }



  /**
   * Model Match
   */


  export type AggregateMatch = {
    _count: MatchCountAggregateOutputType | null
    _min: MatchMinAggregateOutputType | null
    _max: MatchMaxAggregateOutputType | null
  }

  export type MatchMinAggregateOutputType = {
    id: string | null
    fixtureId: string | null
    matchTime: string | null
    matchTitle: string | null
    teamOneName: string | null
    teamOneImage: string | null
    teamTwoName: string | null
    teamTwoImage: string | null
    matchStatus: boolean | null
  }

  export type MatchMaxAggregateOutputType = {
    id: string | null
    fixtureId: string | null
    matchTime: string | null
    matchTitle: string | null
    teamOneName: string | null
    teamOneImage: string | null
    teamTwoName: string | null
    teamTwoImage: string | null
    matchStatus: boolean | null
  }

  export type MatchCountAggregateOutputType = {
    id: number
    fixtureId: number
    matchTime: number
    matchTitle: number
    teamOneName: number
    teamOneImage: number
    teamTwoName: number
    teamTwoImage: number
    matchStatus: number
    _all: number
  }


  export type MatchMinAggregateInputType = {
    id?: true
    fixtureId?: true
    matchTime?: true
    matchTitle?: true
    teamOneName?: true
    teamOneImage?: true
    teamTwoName?: true
    teamTwoImage?: true
    matchStatus?: true
  }

  export type MatchMaxAggregateInputType = {
    id?: true
    fixtureId?: true
    matchTime?: true
    matchTitle?: true
    teamOneName?: true
    teamOneImage?: true
    teamTwoName?: true
    teamTwoImage?: true
    matchStatus?: true
  }

  export type MatchCountAggregateInputType = {
    id?: true
    fixtureId?: true
    matchTime?: true
    matchTitle?: true
    teamOneName?: true
    teamOneImage?: true
    teamTwoName?: true
    teamTwoImage?: true
    matchStatus?: true
    _all?: true
  }

  export type MatchAggregateArgs = {
    /**
     * Filter which Match to aggregate.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: Enumerable<MatchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Matches
    **/
    _count?: true | MatchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MatchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MatchMaxAggregateInputType
  }

  export type GetMatchAggregateType<T extends MatchAggregateArgs> = {
        [P in keyof T & keyof AggregateMatch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMatch[P]>
      : GetScalarType<T[P], AggregateMatch[P]>
  }




  export type MatchGroupByArgs = {
    where?: MatchWhereInput
    orderBy?: Enumerable<MatchOrderByWithAggregationInput>
    by: MatchScalarFieldEnum[]
    having?: MatchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MatchCountAggregateInputType | true
    _min?: MatchMinAggregateInputType
    _max?: MatchMaxAggregateInputType
  }


  export type MatchGroupByOutputType = {
    id: string
    fixtureId: string | null
    matchTime: string
    matchTitle: string
    teamOneName: string
    teamOneImage: string
    teamTwoName: string
    teamTwoImage: string
    matchStatus: boolean
    _count: MatchCountAggregateOutputType | null
    _min: MatchMinAggregateOutputType | null
    _max: MatchMaxAggregateOutputType | null
  }

  type GetMatchGroupByPayload<T extends MatchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<MatchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MatchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MatchGroupByOutputType[P]>
            : GetScalarType<T[P], MatchGroupByOutputType[P]>
        }
      >
    >


  export type MatchSelect = {
    id?: boolean
    fixtureId?: boolean
    matchTime?: boolean
    matchTitle?: boolean
    teamOneName?: boolean
    teamOneImage?: boolean
    teamTwoName?: boolean
    teamTwoImage?: boolean
    matchStatus?: boolean
    streamingSources?: boolean | Match$streamingSourcesArgs
    _count?: boolean | MatchCountOutputTypeArgs
  }


  export type MatchInclude = {
    streamingSources?: boolean | Match$streamingSourcesArgs
    _count?: boolean | MatchCountOutputTypeArgs
  }

  export type MatchGetPayload<S extends boolean | null | undefined | MatchArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Match :
    S extends undefined ? never :
    S extends { include: any } & (MatchArgs | MatchFindManyArgs)
    ? Match  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'streamingSources' ? Array < StreamGetPayload<S['include'][P]>>  :
        P extends '_count' ? MatchCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (MatchArgs | MatchFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'streamingSources' ? Array < StreamGetPayload<S['select'][P]>>  :
        P extends '_count' ? MatchCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Match ? Match[P] : never
  } 
      : Match


  type MatchCountArgs = 
    Omit<MatchFindManyArgs, 'select' | 'include'> & {
      select?: MatchCountAggregateInputType | true
    }

  export interface MatchDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Match that matches the filter.
     * @param {MatchFindUniqueArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MatchFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MatchFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Match'> extends True ? Prisma__MatchClient<MatchGetPayload<T>> : Prisma__MatchClient<MatchGetPayload<T> | null, null>

    /**
     * Find one Match that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MatchFindUniqueOrThrowArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MatchFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, MatchFindUniqueOrThrowArgs>
    ): Prisma__MatchClient<MatchGetPayload<T>>

    /**
     * Find the first Match that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindFirstArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MatchFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MatchFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Match'> extends True ? Prisma__MatchClient<MatchGetPayload<T>> : Prisma__MatchClient<MatchGetPayload<T> | null, null>

    /**
     * Find the first Match that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindFirstOrThrowArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MatchFindFirstOrThrowArgs>(
      args?: SelectSubset<T, MatchFindFirstOrThrowArgs>
    ): Prisma__MatchClient<MatchGetPayload<T>>

    /**
     * Find zero or more Matches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Matches
     * const matches = await prisma.match.findMany()
     * 
     * // Get first 10 Matches
     * const matches = await prisma.match.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const matchWithIdOnly = await prisma.match.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MatchFindManyArgs>(
      args?: SelectSubset<T, MatchFindManyArgs>
    ): Prisma.PrismaPromise<Array<MatchGetPayload<T>>>

    /**
     * Create a Match.
     * @param {MatchCreateArgs} args - Arguments to create a Match.
     * @example
     * // Create one Match
     * const Match = await prisma.match.create({
     *   data: {
     *     // ... data to create a Match
     *   }
     * })
     * 
    **/
    create<T extends MatchCreateArgs>(
      args: SelectSubset<T, MatchCreateArgs>
    ): Prisma__MatchClient<MatchGetPayload<T>>

    /**
     * Create many Matches.
     *     @param {MatchCreateManyArgs} args - Arguments to create many Matches.
     *     @example
     *     // Create many Matches
     *     const match = await prisma.match.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MatchCreateManyArgs>(
      args?: SelectSubset<T, MatchCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Match.
     * @param {MatchDeleteArgs} args - Arguments to delete one Match.
     * @example
     * // Delete one Match
     * const Match = await prisma.match.delete({
     *   where: {
     *     // ... filter to delete one Match
     *   }
     * })
     * 
    **/
    delete<T extends MatchDeleteArgs>(
      args: SelectSubset<T, MatchDeleteArgs>
    ): Prisma__MatchClient<MatchGetPayload<T>>

    /**
     * Update one Match.
     * @param {MatchUpdateArgs} args - Arguments to update one Match.
     * @example
     * // Update one Match
     * const match = await prisma.match.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MatchUpdateArgs>(
      args: SelectSubset<T, MatchUpdateArgs>
    ): Prisma__MatchClient<MatchGetPayload<T>>

    /**
     * Delete zero or more Matches.
     * @param {MatchDeleteManyArgs} args - Arguments to filter Matches to delete.
     * @example
     * // Delete a few Matches
     * const { count } = await prisma.match.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MatchDeleteManyArgs>(
      args?: SelectSubset<T, MatchDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Matches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Matches
     * const match = await prisma.match.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MatchUpdateManyArgs>(
      args: SelectSubset<T, MatchUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Match.
     * @param {MatchUpsertArgs} args - Arguments to update or create a Match.
     * @example
     * // Update or create a Match
     * const match = await prisma.match.upsert({
     *   create: {
     *     // ... data to create a Match
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Match we want to update
     *   }
     * })
    **/
    upsert<T extends MatchUpsertArgs>(
      args: SelectSubset<T, MatchUpsertArgs>
    ): Prisma__MatchClient<MatchGetPayload<T>>

    /**
     * Find zero or more Matches that matches the filter.
     * @param {MatchFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const match = await prisma.match.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: MatchFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Match.
     * @param {MatchAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const match = await prisma.match.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: MatchAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Matches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchCountArgs} args - Arguments to filter Matches to count.
     * @example
     * // Count the number of Matches
     * const count = await prisma.match.count({
     *   where: {
     *     // ... the filter for the Matches we want to count
     *   }
     * })
    **/
    count<T extends MatchCountArgs>(
      args?: Subset<T, MatchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MatchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Match.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MatchAggregateArgs>(args: Subset<T, MatchAggregateArgs>): Prisma.PrismaPromise<GetMatchAggregateType<T>>

    /**
     * Group by Match.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MatchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MatchGroupByArgs['orderBy'] }
        : { orderBy?: MatchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MatchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMatchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Match.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MatchClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    streamingSources<T extends Match$streamingSourcesArgs= {}>(args?: Subset<T, Match$streamingSourcesArgs>): Prisma.PrismaPromise<Array<StreamGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Match base type for findUnique actions
   */
  export type MatchFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchInclude | null
    /**
     * Filter, which Match to fetch.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match findUnique
   */
  export interface MatchFindUniqueArgs extends MatchFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Match findUniqueOrThrow
   */
  export type MatchFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchInclude | null
    /**
     * Filter, which Match to fetch.
     */
    where: MatchWhereUniqueInput
  }


  /**
   * Match base type for findFirst actions
   */
  export type MatchFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchInclude | null
    /**
     * Filter, which Match to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: Enumerable<MatchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Matches.
     */
    distinct?: Enumerable<MatchScalarFieldEnum>
  }

  /**
   * Match findFirst
   */
  export interface MatchFindFirstArgs extends MatchFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Match findFirstOrThrow
   */
  export type MatchFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchInclude | null
    /**
     * Filter, which Match to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: Enumerable<MatchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Matches.
     */
    distinct?: Enumerable<MatchScalarFieldEnum>
  }


  /**
   * Match findMany
   */
  export type MatchFindManyArgs = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchInclude | null
    /**
     * Filter, which Matches to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: Enumerable<MatchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    distinct?: Enumerable<MatchScalarFieldEnum>
  }


  /**
   * Match create
   */
  export type MatchCreateArgs = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchInclude | null
    /**
     * The data needed to create a Match.
     */
    data: XOR<MatchCreateInput, MatchUncheckedCreateInput>
  }


  /**
   * Match createMany
   */
  export type MatchCreateManyArgs = {
    /**
     * The data used to create many Matches.
     */
    data: Enumerable<MatchCreateManyInput>
  }


  /**
   * Match update
   */
  export type MatchUpdateArgs = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchInclude | null
    /**
     * The data needed to update a Match.
     */
    data: XOR<MatchUpdateInput, MatchUncheckedUpdateInput>
    /**
     * Choose, which Match to update.
     */
    where: MatchWhereUniqueInput
  }


  /**
   * Match updateMany
   */
  export type MatchUpdateManyArgs = {
    /**
     * The data used to update Matches.
     */
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyInput>
    /**
     * Filter which Matches to update
     */
    where?: MatchWhereInput
  }


  /**
   * Match upsert
   */
  export type MatchUpsertArgs = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchInclude | null
    /**
     * The filter to search for the Match to update in case it exists.
     */
    where: MatchWhereUniqueInput
    /**
     * In case the Match found by the `where` argument doesn't exist, create a new Match with this data.
     */
    create: XOR<MatchCreateInput, MatchUncheckedCreateInput>
    /**
     * In case the Match was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MatchUpdateInput, MatchUncheckedUpdateInput>
  }


  /**
   * Match delete
   */
  export type MatchDeleteArgs = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchInclude | null
    /**
     * Filter which Match to delete.
     */
    where: MatchWhereUniqueInput
  }


  /**
   * Match deleteMany
   */
  export type MatchDeleteManyArgs = {
    /**
     * Filter which Matches to delete
     */
    where?: MatchWhereInput
  }


  /**
   * Match findRaw
   */
  export type MatchFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Match aggregateRaw
   */
  export type MatchAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Match.streamingSources
   */
  export type Match$streamingSourcesArgs = {
    /**
     * Select specific fields to fetch from the Stream
     */
    select?: StreamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StreamInclude | null
    where?: StreamWhereInput
    orderBy?: Enumerable<StreamOrderByWithRelationInput>
    cursor?: StreamWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<StreamScalarFieldEnum>
  }


  /**
   * Match without action
   */
  export type MatchArgs = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchInclude | null
  }



  /**
   * Model Stream
   */


  export type AggregateStream = {
    _count: StreamCountAggregateOutputType | null
    _min: StreamMinAggregateOutputType | null
    _max: StreamMaxAggregateOutputType | null
  }

  export type StreamMinAggregateOutputType = {
    id: string | null
    matchId: string | null
    streamTitle: string | null
    isPremium: boolean | null
    resulation: string | null
    platform: string | null
    portraitWatermark: string | null
    landscapeWatermark: string | null
    streamType: StreamType | null
    streamUrl: string | null
    headers: string | null
    streamKey: string | null
  }

  export type StreamMaxAggregateOutputType = {
    id: string | null
    matchId: string | null
    streamTitle: string | null
    isPremium: boolean | null
    resulation: string | null
    platform: string | null
    portraitWatermark: string | null
    landscapeWatermark: string | null
    streamType: StreamType | null
    streamUrl: string | null
    headers: string | null
    streamKey: string | null
  }

  export type StreamCountAggregateOutputType = {
    id: number
    matchId: number
    streamTitle: number
    isPremium: number
    resulation: number
    platform: number
    portraitWatermark: number
    landscapeWatermark: number
    streamType: number
    streamUrl: number
    headers: number
    streamKey: number
    _all: number
  }


  export type StreamMinAggregateInputType = {
    id?: true
    matchId?: true
    streamTitle?: true
    isPremium?: true
    resulation?: true
    platform?: true
    portraitWatermark?: true
    landscapeWatermark?: true
    streamType?: true
    streamUrl?: true
    headers?: true
    streamKey?: true
  }

  export type StreamMaxAggregateInputType = {
    id?: true
    matchId?: true
    streamTitle?: true
    isPremium?: true
    resulation?: true
    platform?: true
    portraitWatermark?: true
    landscapeWatermark?: true
    streamType?: true
    streamUrl?: true
    headers?: true
    streamKey?: true
  }

  export type StreamCountAggregateInputType = {
    id?: true
    matchId?: true
    streamTitle?: true
    isPremium?: true
    resulation?: true
    platform?: true
    portraitWatermark?: true
    landscapeWatermark?: true
    streamType?: true
    streamUrl?: true
    headers?: true
    streamKey?: true
    _all?: true
  }

  export type StreamAggregateArgs = {
    /**
     * Filter which Stream to aggregate.
     */
    where?: StreamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Streams to fetch.
     */
    orderBy?: Enumerable<StreamOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StreamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Streams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Streams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Streams
    **/
    _count?: true | StreamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StreamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StreamMaxAggregateInputType
  }

  export type GetStreamAggregateType<T extends StreamAggregateArgs> = {
        [P in keyof T & keyof AggregateStream]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStream[P]>
      : GetScalarType<T[P], AggregateStream[P]>
  }




  export type StreamGroupByArgs = {
    where?: StreamWhereInput
    orderBy?: Enumerable<StreamOrderByWithAggregationInput>
    by: StreamScalarFieldEnum[]
    having?: StreamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StreamCountAggregateInputType | true
    _min?: StreamMinAggregateInputType
    _max?: StreamMaxAggregateInputType
  }


  export type StreamGroupByOutputType = {
    id: string
    matchId: string
    streamTitle: string
    isPremium: boolean
    resulation: string
    platform: string
    portraitWatermark: string
    landscapeWatermark: string
    streamType: StreamType
    streamUrl: string | null
    headers: string | null
    streamKey: string | null
    _count: StreamCountAggregateOutputType | null
    _min: StreamMinAggregateOutputType | null
    _max: StreamMaxAggregateOutputType | null
  }

  type GetStreamGroupByPayload<T extends StreamGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<StreamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StreamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StreamGroupByOutputType[P]>
            : GetScalarType<T[P], StreamGroupByOutputType[P]>
        }
      >
    >


  export type StreamSelect = {
    id?: boolean
    matchId?: boolean
    streamTitle?: boolean
    isPremium?: boolean
    resulation?: boolean
    platform?: boolean
    portraitWatermark?: boolean
    landscapeWatermark?: boolean
    streamType?: boolean
    streamUrl?: boolean
    headers?: boolean
    streamKey?: boolean
    match?: boolean | MatchArgs
  }


  export type StreamInclude = {
    match?: boolean | MatchArgs
  }

  export type StreamGetPayload<S extends boolean | null | undefined | StreamArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Stream :
    S extends undefined ? never :
    S extends { include: any } & (StreamArgs | StreamFindManyArgs)
    ? Stream  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'match' ? MatchGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (StreamArgs | StreamFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'match' ? MatchGetPayload<S['select'][P]> :  P extends keyof Stream ? Stream[P] : never
  } 
      : Stream


  type StreamCountArgs = 
    Omit<StreamFindManyArgs, 'select' | 'include'> & {
      select?: StreamCountAggregateInputType | true
    }

  export interface StreamDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Stream that matches the filter.
     * @param {StreamFindUniqueArgs} args - Arguments to find a Stream
     * @example
     * // Get one Stream
     * const stream = await prisma.stream.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StreamFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, StreamFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Stream'> extends True ? Prisma__StreamClient<StreamGetPayload<T>> : Prisma__StreamClient<StreamGetPayload<T> | null, null>

    /**
     * Find one Stream that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StreamFindUniqueOrThrowArgs} args - Arguments to find a Stream
     * @example
     * // Get one Stream
     * const stream = await prisma.stream.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StreamFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, StreamFindUniqueOrThrowArgs>
    ): Prisma__StreamClient<StreamGetPayload<T>>

    /**
     * Find the first Stream that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamFindFirstArgs} args - Arguments to find a Stream
     * @example
     * // Get one Stream
     * const stream = await prisma.stream.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StreamFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, StreamFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Stream'> extends True ? Prisma__StreamClient<StreamGetPayload<T>> : Prisma__StreamClient<StreamGetPayload<T> | null, null>

    /**
     * Find the first Stream that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamFindFirstOrThrowArgs} args - Arguments to find a Stream
     * @example
     * // Get one Stream
     * const stream = await prisma.stream.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StreamFindFirstOrThrowArgs>(
      args?: SelectSubset<T, StreamFindFirstOrThrowArgs>
    ): Prisma__StreamClient<StreamGetPayload<T>>

    /**
     * Find zero or more Streams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Streams
     * const streams = await prisma.stream.findMany()
     * 
     * // Get first 10 Streams
     * const streams = await prisma.stream.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const streamWithIdOnly = await prisma.stream.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StreamFindManyArgs>(
      args?: SelectSubset<T, StreamFindManyArgs>
    ): Prisma.PrismaPromise<Array<StreamGetPayload<T>>>

    /**
     * Create a Stream.
     * @param {StreamCreateArgs} args - Arguments to create a Stream.
     * @example
     * // Create one Stream
     * const Stream = await prisma.stream.create({
     *   data: {
     *     // ... data to create a Stream
     *   }
     * })
     * 
    **/
    create<T extends StreamCreateArgs>(
      args: SelectSubset<T, StreamCreateArgs>
    ): Prisma__StreamClient<StreamGetPayload<T>>

    /**
     * Create many Streams.
     *     @param {StreamCreateManyArgs} args - Arguments to create many Streams.
     *     @example
     *     // Create many Streams
     *     const stream = await prisma.stream.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StreamCreateManyArgs>(
      args?: SelectSubset<T, StreamCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Stream.
     * @param {StreamDeleteArgs} args - Arguments to delete one Stream.
     * @example
     * // Delete one Stream
     * const Stream = await prisma.stream.delete({
     *   where: {
     *     // ... filter to delete one Stream
     *   }
     * })
     * 
    **/
    delete<T extends StreamDeleteArgs>(
      args: SelectSubset<T, StreamDeleteArgs>
    ): Prisma__StreamClient<StreamGetPayload<T>>

    /**
     * Update one Stream.
     * @param {StreamUpdateArgs} args - Arguments to update one Stream.
     * @example
     * // Update one Stream
     * const stream = await prisma.stream.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StreamUpdateArgs>(
      args: SelectSubset<T, StreamUpdateArgs>
    ): Prisma__StreamClient<StreamGetPayload<T>>

    /**
     * Delete zero or more Streams.
     * @param {StreamDeleteManyArgs} args - Arguments to filter Streams to delete.
     * @example
     * // Delete a few Streams
     * const { count } = await prisma.stream.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StreamDeleteManyArgs>(
      args?: SelectSubset<T, StreamDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Streams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Streams
     * const stream = await prisma.stream.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StreamUpdateManyArgs>(
      args: SelectSubset<T, StreamUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Stream.
     * @param {StreamUpsertArgs} args - Arguments to update or create a Stream.
     * @example
     * // Update or create a Stream
     * const stream = await prisma.stream.upsert({
     *   create: {
     *     // ... data to create a Stream
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Stream we want to update
     *   }
     * })
    **/
    upsert<T extends StreamUpsertArgs>(
      args: SelectSubset<T, StreamUpsertArgs>
    ): Prisma__StreamClient<StreamGetPayload<T>>

    /**
     * Find zero or more Streams that matches the filter.
     * @param {StreamFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const stream = await prisma.stream.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: StreamFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Stream.
     * @param {StreamAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const stream = await prisma.stream.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: StreamAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Streams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamCountArgs} args - Arguments to filter Streams to count.
     * @example
     * // Count the number of Streams
     * const count = await prisma.stream.count({
     *   where: {
     *     // ... the filter for the Streams we want to count
     *   }
     * })
    **/
    count<T extends StreamCountArgs>(
      args?: Subset<T, StreamCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StreamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Stream.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StreamAggregateArgs>(args: Subset<T, StreamAggregateArgs>): Prisma.PrismaPromise<GetStreamAggregateType<T>>

    /**
     * Group by Stream.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StreamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StreamGroupByArgs['orderBy'] }
        : { orderBy?: StreamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StreamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStreamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Stream.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__StreamClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    match<T extends MatchArgs= {}>(args?: Subset<T, MatchArgs>): Prisma__MatchClient<MatchGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Stream base type for findUnique actions
   */
  export type StreamFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Stream
     */
    select?: StreamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StreamInclude | null
    /**
     * Filter, which Stream to fetch.
     */
    where: StreamWhereUniqueInput
  }

  /**
   * Stream findUnique
   */
  export interface StreamFindUniqueArgs extends StreamFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Stream findUniqueOrThrow
   */
  export type StreamFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Stream
     */
    select?: StreamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StreamInclude | null
    /**
     * Filter, which Stream to fetch.
     */
    where: StreamWhereUniqueInput
  }


  /**
   * Stream base type for findFirst actions
   */
  export type StreamFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Stream
     */
    select?: StreamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StreamInclude | null
    /**
     * Filter, which Stream to fetch.
     */
    where?: StreamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Streams to fetch.
     */
    orderBy?: Enumerable<StreamOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Streams.
     */
    cursor?: StreamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Streams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Streams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Streams.
     */
    distinct?: Enumerable<StreamScalarFieldEnum>
  }

  /**
   * Stream findFirst
   */
  export interface StreamFindFirstArgs extends StreamFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Stream findFirstOrThrow
   */
  export type StreamFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Stream
     */
    select?: StreamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StreamInclude | null
    /**
     * Filter, which Stream to fetch.
     */
    where?: StreamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Streams to fetch.
     */
    orderBy?: Enumerable<StreamOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Streams.
     */
    cursor?: StreamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Streams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Streams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Streams.
     */
    distinct?: Enumerable<StreamScalarFieldEnum>
  }


  /**
   * Stream findMany
   */
  export type StreamFindManyArgs = {
    /**
     * Select specific fields to fetch from the Stream
     */
    select?: StreamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StreamInclude | null
    /**
     * Filter, which Streams to fetch.
     */
    where?: StreamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Streams to fetch.
     */
    orderBy?: Enumerable<StreamOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Streams.
     */
    cursor?: StreamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Streams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Streams.
     */
    skip?: number
    distinct?: Enumerable<StreamScalarFieldEnum>
  }


  /**
   * Stream create
   */
  export type StreamCreateArgs = {
    /**
     * Select specific fields to fetch from the Stream
     */
    select?: StreamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StreamInclude | null
    /**
     * The data needed to create a Stream.
     */
    data: XOR<StreamCreateInput, StreamUncheckedCreateInput>
  }


  /**
   * Stream createMany
   */
  export type StreamCreateManyArgs = {
    /**
     * The data used to create many Streams.
     */
    data: Enumerable<StreamCreateManyInput>
  }


  /**
   * Stream update
   */
  export type StreamUpdateArgs = {
    /**
     * Select specific fields to fetch from the Stream
     */
    select?: StreamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StreamInclude | null
    /**
     * The data needed to update a Stream.
     */
    data: XOR<StreamUpdateInput, StreamUncheckedUpdateInput>
    /**
     * Choose, which Stream to update.
     */
    where: StreamWhereUniqueInput
  }


  /**
   * Stream updateMany
   */
  export type StreamUpdateManyArgs = {
    /**
     * The data used to update Streams.
     */
    data: XOR<StreamUpdateManyMutationInput, StreamUncheckedUpdateManyInput>
    /**
     * Filter which Streams to update
     */
    where?: StreamWhereInput
  }


  /**
   * Stream upsert
   */
  export type StreamUpsertArgs = {
    /**
     * Select specific fields to fetch from the Stream
     */
    select?: StreamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StreamInclude | null
    /**
     * The filter to search for the Stream to update in case it exists.
     */
    where: StreamWhereUniqueInput
    /**
     * In case the Stream found by the `where` argument doesn't exist, create a new Stream with this data.
     */
    create: XOR<StreamCreateInput, StreamUncheckedCreateInput>
    /**
     * In case the Stream was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StreamUpdateInput, StreamUncheckedUpdateInput>
  }


  /**
   * Stream delete
   */
  export type StreamDeleteArgs = {
    /**
     * Select specific fields to fetch from the Stream
     */
    select?: StreamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StreamInclude | null
    /**
     * Filter which Stream to delete.
     */
    where: StreamWhereUniqueInput
  }


  /**
   * Stream deleteMany
   */
  export type StreamDeleteManyArgs = {
    /**
     * Filter which Streams to delete
     */
    where?: StreamWhereInput
  }


  /**
   * Stream findRaw
   */
  export type StreamFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Stream aggregateRaw
   */
  export type StreamAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Stream without action
   */
  export type StreamArgs = {
    /**
     * Select specific fields to fetch from the Stream
     */
    select?: StreamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StreamInclude | null
  }



  /**
   * Model Highlight
   */


  export type AggregateHighlight = {
    _count: HighlightCountAggregateOutputType | null
    _min: HighlightMinAggregateOutputType | null
    _max: HighlightMaxAggregateOutputType | null
  }

  export type HighlightMinAggregateOutputType = {
    id: string | null
    fixtureId: string | null
    title: string | null
    shortDescription: string | null
    status: boolean | null
    youtubeUrl: string | null
    youtubeThumbnail: string | null
    videoType: VideoType | null
    thumbnailType: ThumbnailType | null
    imageUrl: string | null
    imageFile: string | null
  }

  export type HighlightMaxAggregateOutputType = {
    id: string | null
    fixtureId: string | null
    title: string | null
    shortDescription: string | null
    status: boolean | null
    youtubeUrl: string | null
    youtubeThumbnail: string | null
    videoType: VideoType | null
    thumbnailType: ThumbnailType | null
    imageUrl: string | null
    imageFile: string | null
  }

  export type HighlightCountAggregateOutputType = {
    id: number
    fixtureId: number
    title: number
    shortDescription: number
    status: number
    youtubeUrl: number
    youtubeThumbnail: number
    videoType: number
    thumbnailType: number
    imageUrl: number
    imageFile: number
    _all: number
  }


  export type HighlightMinAggregateInputType = {
    id?: true
    fixtureId?: true
    title?: true
    shortDescription?: true
    status?: true
    youtubeUrl?: true
    youtubeThumbnail?: true
    videoType?: true
    thumbnailType?: true
    imageUrl?: true
    imageFile?: true
  }

  export type HighlightMaxAggregateInputType = {
    id?: true
    fixtureId?: true
    title?: true
    shortDescription?: true
    status?: true
    youtubeUrl?: true
    youtubeThumbnail?: true
    videoType?: true
    thumbnailType?: true
    imageUrl?: true
    imageFile?: true
  }

  export type HighlightCountAggregateInputType = {
    id?: true
    fixtureId?: true
    title?: true
    shortDescription?: true
    status?: true
    youtubeUrl?: true
    youtubeThumbnail?: true
    videoType?: true
    thumbnailType?: true
    imageUrl?: true
    imageFile?: true
    _all?: true
  }

  export type HighlightAggregateArgs = {
    /**
     * Filter which Highlight to aggregate.
     */
    where?: HighlightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Highlights to fetch.
     */
    orderBy?: Enumerable<HighlightOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HighlightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Highlights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Highlights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Highlights
    **/
    _count?: true | HighlightCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HighlightMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HighlightMaxAggregateInputType
  }

  export type GetHighlightAggregateType<T extends HighlightAggregateArgs> = {
        [P in keyof T & keyof AggregateHighlight]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHighlight[P]>
      : GetScalarType<T[P], AggregateHighlight[P]>
  }




  export type HighlightGroupByArgs = {
    where?: HighlightWhereInput
    orderBy?: Enumerable<HighlightOrderByWithAggregationInput>
    by: HighlightScalarFieldEnum[]
    having?: HighlightScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HighlightCountAggregateInputType | true
    _min?: HighlightMinAggregateInputType
    _max?: HighlightMaxAggregateInputType
  }


  export type HighlightGroupByOutputType = {
    id: string
    fixtureId: string | null
    title: string
    shortDescription: string | null
    status: boolean
    youtubeUrl: string | null
    youtubeThumbnail: string | null
    videoType: VideoType
    thumbnailType: ThumbnailType
    imageUrl: string | null
    imageFile: string | null
    _count: HighlightCountAggregateOutputType | null
    _min: HighlightMinAggregateOutputType | null
    _max: HighlightMaxAggregateOutputType | null
  }

  type GetHighlightGroupByPayload<T extends HighlightGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<HighlightGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HighlightGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HighlightGroupByOutputType[P]>
            : GetScalarType<T[P], HighlightGroupByOutputType[P]>
        }
      >
    >


  export type HighlightSelect = {
    id?: boolean
    fixtureId?: boolean
    title?: boolean
    shortDescription?: boolean
    status?: boolean
    youtubeUrl?: boolean
    youtubeThumbnail?: boolean
    videoType?: boolean
    thumbnailType?: boolean
    imageUrl?: boolean
    imageFile?: boolean
  }


  export type HighlightGetPayload<S extends boolean | null | undefined | HighlightArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Highlight :
    S extends undefined ? never :
    S extends { include: any } & (HighlightArgs | HighlightFindManyArgs)
    ? Highlight 
    : S extends { select: any } & (HighlightArgs | HighlightFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Highlight ? Highlight[P] : never
  } 
      : Highlight


  type HighlightCountArgs = 
    Omit<HighlightFindManyArgs, 'select' | 'include'> & {
      select?: HighlightCountAggregateInputType | true
    }

  export interface HighlightDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Highlight that matches the filter.
     * @param {HighlightFindUniqueArgs} args - Arguments to find a Highlight
     * @example
     * // Get one Highlight
     * const highlight = await prisma.highlight.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HighlightFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, HighlightFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Highlight'> extends True ? Prisma__HighlightClient<HighlightGetPayload<T>> : Prisma__HighlightClient<HighlightGetPayload<T> | null, null>

    /**
     * Find one Highlight that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {HighlightFindUniqueOrThrowArgs} args - Arguments to find a Highlight
     * @example
     * // Get one Highlight
     * const highlight = await prisma.highlight.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HighlightFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, HighlightFindUniqueOrThrowArgs>
    ): Prisma__HighlightClient<HighlightGetPayload<T>>

    /**
     * Find the first Highlight that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HighlightFindFirstArgs} args - Arguments to find a Highlight
     * @example
     * // Get one Highlight
     * const highlight = await prisma.highlight.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HighlightFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, HighlightFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Highlight'> extends True ? Prisma__HighlightClient<HighlightGetPayload<T>> : Prisma__HighlightClient<HighlightGetPayload<T> | null, null>

    /**
     * Find the first Highlight that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HighlightFindFirstOrThrowArgs} args - Arguments to find a Highlight
     * @example
     * // Get one Highlight
     * const highlight = await prisma.highlight.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HighlightFindFirstOrThrowArgs>(
      args?: SelectSubset<T, HighlightFindFirstOrThrowArgs>
    ): Prisma__HighlightClient<HighlightGetPayload<T>>

    /**
     * Find zero or more Highlights that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HighlightFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Highlights
     * const highlights = await prisma.highlight.findMany()
     * 
     * // Get first 10 Highlights
     * const highlights = await prisma.highlight.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const highlightWithIdOnly = await prisma.highlight.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends HighlightFindManyArgs>(
      args?: SelectSubset<T, HighlightFindManyArgs>
    ): Prisma.PrismaPromise<Array<HighlightGetPayload<T>>>

    /**
     * Create a Highlight.
     * @param {HighlightCreateArgs} args - Arguments to create a Highlight.
     * @example
     * // Create one Highlight
     * const Highlight = await prisma.highlight.create({
     *   data: {
     *     // ... data to create a Highlight
     *   }
     * })
     * 
    **/
    create<T extends HighlightCreateArgs>(
      args: SelectSubset<T, HighlightCreateArgs>
    ): Prisma__HighlightClient<HighlightGetPayload<T>>

    /**
     * Create many Highlights.
     *     @param {HighlightCreateManyArgs} args - Arguments to create many Highlights.
     *     @example
     *     // Create many Highlights
     *     const highlight = await prisma.highlight.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends HighlightCreateManyArgs>(
      args?: SelectSubset<T, HighlightCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Highlight.
     * @param {HighlightDeleteArgs} args - Arguments to delete one Highlight.
     * @example
     * // Delete one Highlight
     * const Highlight = await prisma.highlight.delete({
     *   where: {
     *     // ... filter to delete one Highlight
     *   }
     * })
     * 
    **/
    delete<T extends HighlightDeleteArgs>(
      args: SelectSubset<T, HighlightDeleteArgs>
    ): Prisma__HighlightClient<HighlightGetPayload<T>>

    /**
     * Update one Highlight.
     * @param {HighlightUpdateArgs} args - Arguments to update one Highlight.
     * @example
     * // Update one Highlight
     * const highlight = await prisma.highlight.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HighlightUpdateArgs>(
      args: SelectSubset<T, HighlightUpdateArgs>
    ): Prisma__HighlightClient<HighlightGetPayload<T>>

    /**
     * Delete zero or more Highlights.
     * @param {HighlightDeleteManyArgs} args - Arguments to filter Highlights to delete.
     * @example
     * // Delete a few Highlights
     * const { count } = await prisma.highlight.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HighlightDeleteManyArgs>(
      args?: SelectSubset<T, HighlightDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Highlights.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HighlightUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Highlights
     * const highlight = await prisma.highlight.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HighlightUpdateManyArgs>(
      args: SelectSubset<T, HighlightUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Highlight.
     * @param {HighlightUpsertArgs} args - Arguments to update or create a Highlight.
     * @example
     * // Update or create a Highlight
     * const highlight = await prisma.highlight.upsert({
     *   create: {
     *     // ... data to create a Highlight
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Highlight we want to update
     *   }
     * })
    **/
    upsert<T extends HighlightUpsertArgs>(
      args: SelectSubset<T, HighlightUpsertArgs>
    ): Prisma__HighlightClient<HighlightGetPayload<T>>

    /**
     * Find zero or more Highlights that matches the filter.
     * @param {HighlightFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const highlight = await prisma.highlight.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: HighlightFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Highlight.
     * @param {HighlightAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const highlight = await prisma.highlight.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: HighlightAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Highlights.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HighlightCountArgs} args - Arguments to filter Highlights to count.
     * @example
     * // Count the number of Highlights
     * const count = await prisma.highlight.count({
     *   where: {
     *     // ... the filter for the Highlights we want to count
     *   }
     * })
    **/
    count<T extends HighlightCountArgs>(
      args?: Subset<T, HighlightCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HighlightCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Highlight.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HighlightAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HighlightAggregateArgs>(args: Subset<T, HighlightAggregateArgs>): Prisma.PrismaPromise<GetHighlightAggregateType<T>>

    /**
     * Group by Highlight.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HighlightGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HighlightGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HighlightGroupByArgs['orderBy'] }
        : { orderBy?: HighlightGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HighlightGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHighlightGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Highlight.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__HighlightClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Highlight base type for findUnique actions
   */
  export type HighlightFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Highlight
     */
    select?: HighlightSelect | null
    /**
     * Filter, which Highlight to fetch.
     */
    where: HighlightWhereUniqueInput
  }

  /**
   * Highlight findUnique
   */
  export interface HighlightFindUniqueArgs extends HighlightFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Highlight findUniqueOrThrow
   */
  export type HighlightFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Highlight
     */
    select?: HighlightSelect | null
    /**
     * Filter, which Highlight to fetch.
     */
    where: HighlightWhereUniqueInput
  }


  /**
   * Highlight base type for findFirst actions
   */
  export type HighlightFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Highlight
     */
    select?: HighlightSelect | null
    /**
     * Filter, which Highlight to fetch.
     */
    where?: HighlightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Highlights to fetch.
     */
    orderBy?: Enumerable<HighlightOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Highlights.
     */
    cursor?: HighlightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Highlights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Highlights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Highlights.
     */
    distinct?: Enumerable<HighlightScalarFieldEnum>
  }

  /**
   * Highlight findFirst
   */
  export interface HighlightFindFirstArgs extends HighlightFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Highlight findFirstOrThrow
   */
  export type HighlightFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Highlight
     */
    select?: HighlightSelect | null
    /**
     * Filter, which Highlight to fetch.
     */
    where?: HighlightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Highlights to fetch.
     */
    orderBy?: Enumerable<HighlightOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Highlights.
     */
    cursor?: HighlightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Highlights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Highlights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Highlights.
     */
    distinct?: Enumerable<HighlightScalarFieldEnum>
  }


  /**
   * Highlight findMany
   */
  export type HighlightFindManyArgs = {
    /**
     * Select specific fields to fetch from the Highlight
     */
    select?: HighlightSelect | null
    /**
     * Filter, which Highlights to fetch.
     */
    where?: HighlightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Highlights to fetch.
     */
    orderBy?: Enumerable<HighlightOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Highlights.
     */
    cursor?: HighlightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Highlights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Highlights.
     */
    skip?: number
    distinct?: Enumerable<HighlightScalarFieldEnum>
  }


  /**
   * Highlight create
   */
  export type HighlightCreateArgs = {
    /**
     * Select specific fields to fetch from the Highlight
     */
    select?: HighlightSelect | null
    /**
     * The data needed to create a Highlight.
     */
    data: XOR<HighlightCreateInput, HighlightUncheckedCreateInput>
  }


  /**
   * Highlight createMany
   */
  export type HighlightCreateManyArgs = {
    /**
     * The data used to create many Highlights.
     */
    data: Enumerable<HighlightCreateManyInput>
  }


  /**
   * Highlight update
   */
  export type HighlightUpdateArgs = {
    /**
     * Select specific fields to fetch from the Highlight
     */
    select?: HighlightSelect | null
    /**
     * The data needed to update a Highlight.
     */
    data: XOR<HighlightUpdateInput, HighlightUncheckedUpdateInput>
    /**
     * Choose, which Highlight to update.
     */
    where: HighlightWhereUniqueInput
  }


  /**
   * Highlight updateMany
   */
  export type HighlightUpdateManyArgs = {
    /**
     * The data used to update Highlights.
     */
    data: XOR<HighlightUpdateManyMutationInput, HighlightUncheckedUpdateManyInput>
    /**
     * Filter which Highlights to update
     */
    where?: HighlightWhereInput
  }


  /**
   * Highlight upsert
   */
  export type HighlightUpsertArgs = {
    /**
     * Select specific fields to fetch from the Highlight
     */
    select?: HighlightSelect | null
    /**
     * The filter to search for the Highlight to update in case it exists.
     */
    where: HighlightWhereUniqueInput
    /**
     * In case the Highlight found by the `where` argument doesn't exist, create a new Highlight with this data.
     */
    create: XOR<HighlightCreateInput, HighlightUncheckedCreateInput>
    /**
     * In case the Highlight was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HighlightUpdateInput, HighlightUncheckedUpdateInput>
  }


  /**
   * Highlight delete
   */
  export type HighlightDeleteArgs = {
    /**
     * Select specific fields to fetch from the Highlight
     */
    select?: HighlightSelect | null
    /**
     * Filter which Highlight to delete.
     */
    where: HighlightWhereUniqueInput
  }


  /**
   * Highlight deleteMany
   */
  export type HighlightDeleteManyArgs = {
    /**
     * Filter which Highlights to delete
     */
    where?: HighlightWhereInput
  }


  /**
   * Highlight findRaw
   */
  export type HighlightFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Highlight aggregateRaw
   */
  export type HighlightAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Highlight without action
   */
  export type HighlightArgs = {
    /**
     * Select specific fields to fetch from the Highlight
     */
    select?: HighlightSelect | null
  }



  /**
   * Model AppSettings
   */


  export type AggregateAppSettings = {
    _count: AppSettingsCountAggregateOutputType | null
    _min: AppSettingsMinAggregateOutputType | null
    _max: AppSettingsMaxAggregateOutputType | null
  }

  export type AppSettingsMinAggregateOutputType = {
    id: string | null
    notificationType: NotificationType | null
    name: string | null
    oneSignalAppID: string | null
    oneSignalApiKey: string | null
    firebaseServerKey: string | null
    firebaseTopics: string | null
    sportsApiBasedUrl: string | null
    sportsApiKey: string | null
  }

  export type AppSettingsMaxAggregateOutputType = {
    id: string | null
    notificationType: NotificationType | null
    name: string | null
    oneSignalAppID: string | null
    oneSignalApiKey: string | null
    firebaseServerKey: string | null
    firebaseTopics: string | null
    sportsApiBasedUrl: string | null
    sportsApiKey: string | null
  }

  export type AppSettingsCountAggregateOutputType = {
    id: number
    notificationType: number
    name: number
    oneSignalAppID: number
    oneSignalApiKey: number
    firebaseServerKey: number
    firebaseTopics: number
    sportsApiBasedUrl: number
    sportsApiKey: number
    androidSettings: number
    iosSettings: number
    _all: number
  }


  export type AppSettingsMinAggregateInputType = {
    id?: true
    notificationType?: true
    name?: true
    oneSignalAppID?: true
    oneSignalApiKey?: true
    firebaseServerKey?: true
    firebaseTopics?: true
    sportsApiBasedUrl?: true
    sportsApiKey?: true
  }

  export type AppSettingsMaxAggregateInputType = {
    id?: true
    notificationType?: true
    name?: true
    oneSignalAppID?: true
    oneSignalApiKey?: true
    firebaseServerKey?: true
    firebaseTopics?: true
    sportsApiBasedUrl?: true
    sportsApiKey?: true
  }

  export type AppSettingsCountAggregateInputType = {
    id?: true
    notificationType?: true
    name?: true
    oneSignalAppID?: true
    oneSignalApiKey?: true
    firebaseServerKey?: true
    firebaseTopics?: true
    sportsApiBasedUrl?: true
    sportsApiKey?: true
    androidSettings?: true
    iosSettings?: true
    _all?: true
  }

  export type AppSettingsAggregateArgs = {
    /**
     * Filter which AppSettings to aggregate.
     */
    where?: AppSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppSettings to fetch.
     */
    orderBy?: Enumerable<AppSettingsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AppSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AppSettings
    **/
    _count?: true | AppSettingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppSettingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppSettingsMaxAggregateInputType
  }

  export type GetAppSettingsAggregateType<T extends AppSettingsAggregateArgs> = {
        [P in keyof T & keyof AggregateAppSettings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppSettings[P]>
      : GetScalarType<T[P], AggregateAppSettings[P]>
  }




  export type AppSettingsGroupByArgs = {
    where?: AppSettingsWhereInput
    orderBy?: Enumerable<AppSettingsOrderByWithAggregationInput>
    by: AppSettingsScalarFieldEnum[]
    having?: AppSettingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppSettingsCountAggregateInputType | true
    _min?: AppSettingsMinAggregateInputType
    _max?: AppSettingsMaxAggregateInputType
  }


  export type AppSettingsGroupByOutputType = {
    id: string
    notificationType: NotificationType
    name: string
    oneSignalAppID: string | null
    oneSignalApiKey: string | null
    firebaseServerKey: string | null
    firebaseTopics: string | null
    sportsApiBasedUrl: string | null
    sportsApiKey: string | null
    androidSettings: JsonValue | null
    iosSettings: JsonValue | null
    _count: AppSettingsCountAggregateOutputType | null
    _min: AppSettingsMinAggregateOutputType | null
    _max: AppSettingsMaxAggregateOutputType | null
  }

  type GetAppSettingsGroupByPayload<T extends AppSettingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AppSettingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppSettingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppSettingsGroupByOutputType[P]>
            : GetScalarType<T[P], AppSettingsGroupByOutputType[P]>
        }
      >
    >


  export type AppSettingsSelect = {
    id?: boolean
    notificationType?: boolean
    name?: boolean
    oneSignalAppID?: boolean
    oneSignalApiKey?: boolean
    firebaseServerKey?: boolean
    firebaseTopics?: boolean
    sportsApiBasedUrl?: boolean
    sportsApiKey?: boolean
    androidSettings?: boolean
    iosSettings?: boolean
  }


  export type AppSettingsGetPayload<S extends boolean | null | undefined | AppSettingsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? AppSettings :
    S extends undefined ? never :
    S extends { include: any } & (AppSettingsArgs | AppSettingsFindManyArgs)
    ? AppSettings 
    : S extends { select: any } & (AppSettingsArgs | AppSettingsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof AppSettings ? AppSettings[P] : never
  } 
      : AppSettings


  type AppSettingsCountArgs = 
    Omit<AppSettingsFindManyArgs, 'select' | 'include'> & {
      select?: AppSettingsCountAggregateInputType | true
    }

  export interface AppSettingsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one AppSettings that matches the filter.
     * @param {AppSettingsFindUniqueArgs} args - Arguments to find a AppSettings
     * @example
     * // Get one AppSettings
     * const appSettings = await prisma.appSettings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AppSettingsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AppSettingsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'AppSettings'> extends True ? Prisma__AppSettingsClient<AppSettingsGetPayload<T>> : Prisma__AppSettingsClient<AppSettingsGetPayload<T> | null, null>

    /**
     * Find one AppSettings that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AppSettingsFindUniqueOrThrowArgs} args - Arguments to find a AppSettings
     * @example
     * // Get one AppSettings
     * const appSettings = await prisma.appSettings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AppSettingsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AppSettingsFindUniqueOrThrowArgs>
    ): Prisma__AppSettingsClient<AppSettingsGetPayload<T>>

    /**
     * Find the first AppSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppSettingsFindFirstArgs} args - Arguments to find a AppSettings
     * @example
     * // Get one AppSettings
     * const appSettings = await prisma.appSettings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AppSettingsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AppSettingsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'AppSettings'> extends True ? Prisma__AppSettingsClient<AppSettingsGetPayload<T>> : Prisma__AppSettingsClient<AppSettingsGetPayload<T> | null, null>

    /**
     * Find the first AppSettings that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppSettingsFindFirstOrThrowArgs} args - Arguments to find a AppSettings
     * @example
     * // Get one AppSettings
     * const appSettings = await prisma.appSettings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AppSettingsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AppSettingsFindFirstOrThrowArgs>
    ): Prisma__AppSettingsClient<AppSettingsGetPayload<T>>

    /**
     * Find zero or more AppSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppSettingsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AppSettings
     * const appSettings = await prisma.appSettings.findMany()
     * 
     * // Get first 10 AppSettings
     * const appSettings = await prisma.appSettings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const appSettingsWithIdOnly = await prisma.appSettings.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AppSettingsFindManyArgs>(
      args?: SelectSubset<T, AppSettingsFindManyArgs>
    ): Prisma.PrismaPromise<Array<AppSettingsGetPayload<T>>>

    /**
     * Create a AppSettings.
     * @param {AppSettingsCreateArgs} args - Arguments to create a AppSettings.
     * @example
     * // Create one AppSettings
     * const AppSettings = await prisma.appSettings.create({
     *   data: {
     *     // ... data to create a AppSettings
     *   }
     * })
     * 
    **/
    create<T extends AppSettingsCreateArgs>(
      args: SelectSubset<T, AppSettingsCreateArgs>
    ): Prisma__AppSettingsClient<AppSettingsGetPayload<T>>

    /**
     * Create many AppSettings.
     *     @param {AppSettingsCreateManyArgs} args - Arguments to create many AppSettings.
     *     @example
     *     // Create many AppSettings
     *     const appSettings = await prisma.appSettings.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AppSettingsCreateManyArgs>(
      args?: SelectSubset<T, AppSettingsCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AppSettings.
     * @param {AppSettingsDeleteArgs} args - Arguments to delete one AppSettings.
     * @example
     * // Delete one AppSettings
     * const AppSettings = await prisma.appSettings.delete({
     *   where: {
     *     // ... filter to delete one AppSettings
     *   }
     * })
     * 
    **/
    delete<T extends AppSettingsDeleteArgs>(
      args: SelectSubset<T, AppSettingsDeleteArgs>
    ): Prisma__AppSettingsClient<AppSettingsGetPayload<T>>

    /**
     * Update one AppSettings.
     * @param {AppSettingsUpdateArgs} args - Arguments to update one AppSettings.
     * @example
     * // Update one AppSettings
     * const appSettings = await prisma.appSettings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AppSettingsUpdateArgs>(
      args: SelectSubset<T, AppSettingsUpdateArgs>
    ): Prisma__AppSettingsClient<AppSettingsGetPayload<T>>

    /**
     * Delete zero or more AppSettings.
     * @param {AppSettingsDeleteManyArgs} args - Arguments to filter AppSettings to delete.
     * @example
     * // Delete a few AppSettings
     * const { count } = await prisma.appSettings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AppSettingsDeleteManyArgs>(
      args?: SelectSubset<T, AppSettingsDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AppSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppSettingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AppSettings
     * const appSettings = await prisma.appSettings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AppSettingsUpdateManyArgs>(
      args: SelectSubset<T, AppSettingsUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AppSettings.
     * @param {AppSettingsUpsertArgs} args - Arguments to update or create a AppSettings.
     * @example
     * // Update or create a AppSettings
     * const appSettings = await prisma.appSettings.upsert({
     *   create: {
     *     // ... data to create a AppSettings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AppSettings we want to update
     *   }
     * })
    **/
    upsert<T extends AppSettingsUpsertArgs>(
      args: SelectSubset<T, AppSettingsUpsertArgs>
    ): Prisma__AppSettingsClient<AppSettingsGetPayload<T>>

    /**
     * Find zero or more AppSettings that matches the filter.
     * @param {AppSettingsFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const appSettings = await prisma.appSettings.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: AppSettingsFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a AppSettings.
     * @param {AppSettingsAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const appSettings = await prisma.appSettings.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: AppSettingsAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of AppSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppSettingsCountArgs} args - Arguments to filter AppSettings to count.
     * @example
     * // Count the number of AppSettings
     * const count = await prisma.appSettings.count({
     *   where: {
     *     // ... the filter for the AppSettings we want to count
     *   }
     * })
    **/
    count<T extends AppSettingsCountArgs>(
      args?: Subset<T, AppSettingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppSettingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AppSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppSettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppSettingsAggregateArgs>(args: Subset<T, AppSettingsAggregateArgs>): Prisma.PrismaPromise<GetAppSettingsAggregateType<T>>

    /**
     * Group by AppSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppSettingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppSettingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppSettingsGroupByArgs['orderBy'] }
        : { orderBy?: AppSettingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppSettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for AppSettings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AppSettingsClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * AppSettings base type for findUnique actions
   */
  export type AppSettingsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the AppSettings
     */
    select?: AppSettingsSelect | null
    /**
     * Filter, which AppSettings to fetch.
     */
    where: AppSettingsWhereUniqueInput
  }

  /**
   * AppSettings findUnique
   */
  export interface AppSettingsFindUniqueArgs extends AppSettingsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * AppSettings findUniqueOrThrow
   */
  export type AppSettingsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the AppSettings
     */
    select?: AppSettingsSelect | null
    /**
     * Filter, which AppSettings to fetch.
     */
    where: AppSettingsWhereUniqueInput
  }


  /**
   * AppSettings base type for findFirst actions
   */
  export type AppSettingsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the AppSettings
     */
    select?: AppSettingsSelect | null
    /**
     * Filter, which AppSettings to fetch.
     */
    where?: AppSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppSettings to fetch.
     */
    orderBy?: Enumerable<AppSettingsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AppSettings.
     */
    cursor?: AppSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AppSettings.
     */
    distinct?: Enumerable<AppSettingsScalarFieldEnum>
  }

  /**
   * AppSettings findFirst
   */
  export interface AppSettingsFindFirstArgs extends AppSettingsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * AppSettings findFirstOrThrow
   */
  export type AppSettingsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the AppSettings
     */
    select?: AppSettingsSelect | null
    /**
     * Filter, which AppSettings to fetch.
     */
    where?: AppSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppSettings to fetch.
     */
    orderBy?: Enumerable<AppSettingsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AppSettings.
     */
    cursor?: AppSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AppSettings.
     */
    distinct?: Enumerable<AppSettingsScalarFieldEnum>
  }


  /**
   * AppSettings findMany
   */
  export type AppSettingsFindManyArgs = {
    /**
     * Select specific fields to fetch from the AppSettings
     */
    select?: AppSettingsSelect | null
    /**
     * Filter, which AppSettings to fetch.
     */
    where?: AppSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppSettings to fetch.
     */
    orderBy?: Enumerable<AppSettingsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AppSettings.
     */
    cursor?: AppSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppSettings.
     */
    skip?: number
    distinct?: Enumerable<AppSettingsScalarFieldEnum>
  }


  /**
   * AppSettings create
   */
  export type AppSettingsCreateArgs = {
    /**
     * Select specific fields to fetch from the AppSettings
     */
    select?: AppSettingsSelect | null
    /**
     * The data needed to create a AppSettings.
     */
    data: XOR<AppSettingsCreateInput, AppSettingsUncheckedCreateInput>
  }


  /**
   * AppSettings createMany
   */
  export type AppSettingsCreateManyArgs = {
    /**
     * The data used to create many AppSettings.
     */
    data: Enumerable<AppSettingsCreateManyInput>
  }


  /**
   * AppSettings update
   */
  export type AppSettingsUpdateArgs = {
    /**
     * Select specific fields to fetch from the AppSettings
     */
    select?: AppSettingsSelect | null
    /**
     * The data needed to update a AppSettings.
     */
    data: XOR<AppSettingsUpdateInput, AppSettingsUncheckedUpdateInput>
    /**
     * Choose, which AppSettings to update.
     */
    where: AppSettingsWhereUniqueInput
  }


  /**
   * AppSettings updateMany
   */
  export type AppSettingsUpdateManyArgs = {
    /**
     * The data used to update AppSettings.
     */
    data: XOR<AppSettingsUpdateManyMutationInput, AppSettingsUncheckedUpdateManyInput>
    /**
     * Filter which AppSettings to update
     */
    where?: AppSettingsWhereInput
  }


  /**
   * AppSettings upsert
   */
  export type AppSettingsUpsertArgs = {
    /**
     * Select specific fields to fetch from the AppSettings
     */
    select?: AppSettingsSelect | null
    /**
     * The filter to search for the AppSettings to update in case it exists.
     */
    where: AppSettingsWhereUniqueInput
    /**
     * In case the AppSettings found by the `where` argument doesn't exist, create a new AppSettings with this data.
     */
    create: XOR<AppSettingsCreateInput, AppSettingsUncheckedCreateInput>
    /**
     * In case the AppSettings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AppSettingsUpdateInput, AppSettingsUncheckedUpdateInput>
  }


  /**
   * AppSettings delete
   */
  export type AppSettingsDeleteArgs = {
    /**
     * Select specific fields to fetch from the AppSettings
     */
    select?: AppSettingsSelect | null
    /**
     * Filter which AppSettings to delete.
     */
    where: AppSettingsWhereUniqueInput
  }


  /**
   * AppSettings deleteMany
   */
  export type AppSettingsDeleteManyArgs = {
    /**
     * Filter which AppSettings to delete
     */
    where?: AppSettingsWhereInput
  }


  /**
   * AppSettings findRaw
   */
  export type AppSettingsFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * AppSettings aggregateRaw
   */
  export type AppSettingsAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * AppSettings without action
   */
  export type AppSettingsArgs = {
    /**
     * Select specific fields to fetch from the AppSettings
     */
    select?: AppSettingsSelect | null
  }



  /**
   * Model News
   */


  export type AggregateNews = {
    _count: NewsCountAggregateOutputType | null
    _min: NewsMinAggregateOutputType | null
    _max: NewsMaxAggregateOutputType | null
  }

  export type NewsMinAggregateOutputType = {
    id: string | null
    title: string | null
    image: string | null
    date: Date | null
  }

  export type NewsMaxAggregateOutputType = {
    id: string | null
    title: string | null
    image: string | null
    date: Date | null
  }

  export type NewsCountAggregateOutputType = {
    id: number
    title: number
    image: number
    date: number
    _all: number
  }


  export type NewsMinAggregateInputType = {
    id?: true
    title?: true
    image?: true
    date?: true
  }

  export type NewsMaxAggregateInputType = {
    id?: true
    title?: true
    image?: true
    date?: true
  }

  export type NewsCountAggregateInputType = {
    id?: true
    title?: true
    image?: true
    date?: true
    _all?: true
  }

  export type NewsAggregateArgs = {
    /**
     * Filter which News to aggregate.
     */
    where?: NewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of News to fetch.
     */
    orderBy?: Enumerable<NewsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` News from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` News.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned News
    **/
    _count?: true | NewsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NewsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NewsMaxAggregateInputType
  }

  export type GetNewsAggregateType<T extends NewsAggregateArgs> = {
        [P in keyof T & keyof AggregateNews]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNews[P]>
      : GetScalarType<T[P], AggregateNews[P]>
  }




  export type NewsGroupByArgs = {
    where?: NewsWhereInput
    orderBy?: Enumerable<NewsOrderByWithAggregationInput>
    by: NewsScalarFieldEnum[]
    having?: NewsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NewsCountAggregateInputType | true
    _min?: NewsMinAggregateInputType
    _max?: NewsMaxAggregateInputType
  }


  export type NewsGroupByOutputType = {
    id: string
    title: string
    image: string
    date: Date | null
    _count: NewsCountAggregateOutputType | null
    _min: NewsMinAggregateOutputType | null
    _max: NewsMaxAggregateOutputType | null
  }

  type GetNewsGroupByPayload<T extends NewsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<NewsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NewsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NewsGroupByOutputType[P]>
            : GetScalarType<T[P], NewsGroupByOutputType[P]>
        }
      >
    >


  export type NewsSelect = {
    id?: boolean
    title?: boolean
    image?: boolean
    date?: boolean
  }


  export type NewsGetPayload<S extends boolean | null | undefined | NewsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? News :
    S extends undefined ? never :
    S extends { include: any } & (NewsArgs | NewsFindManyArgs)
    ? News 
    : S extends { select: any } & (NewsArgs | NewsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof News ? News[P] : never
  } 
      : News


  type NewsCountArgs = 
    Omit<NewsFindManyArgs, 'select' | 'include'> & {
      select?: NewsCountAggregateInputType | true
    }

  export interface NewsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one News that matches the filter.
     * @param {NewsFindUniqueArgs} args - Arguments to find a News
     * @example
     * // Get one News
     * const news = await prisma.news.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NewsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, NewsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'News'> extends True ? Prisma__NewsClient<NewsGetPayload<T>> : Prisma__NewsClient<NewsGetPayload<T> | null, null>

    /**
     * Find one News that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NewsFindUniqueOrThrowArgs} args - Arguments to find a News
     * @example
     * // Get one News
     * const news = await prisma.news.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NewsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, NewsFindUniqueOrThrowArgs>
    ): Prisma__NewsClient<NewsGetPayload<T>>

    /**
     * Find the first News that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsFindFirstArgs} args - Arguments to find a News
     * @example
     * // Get one News
     * const news = await prisma.news.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NewsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, NewsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'News'> extends True ? Prisma__NewsClient<NewsGetPayload<T>> : Prisma__NewsClient<NewsGetPayload<T> | null, null>

    /**
     * Find the first News that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsFindFirstOrThrowArgs} args - Arguments to find a News
     * @example
     * // Get one News
     * const news = await prisma.news.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NewsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, NewsFindFirstOrThrowArgs>
    ): Prisma__NewsClient<NewsGetPayload<T>>

    /**
     * Find zero or more News that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all News
     * const news = await prisma.news.findMany()
     * 
     * // Get first 10 News
     * const news = await prisma.news.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const newsWithIdOnly = await prisma.news.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NewsFindManyArgs>(
      args?: SelectSubset<T, NewsFindManyArgs>
    ): Prisma.PrismaPromise<Array<NewsGetPayload<T>>>

    /**
     * Create a News.
     * @param {NewsCreateArgs} args - Arguments to create a News.
     * @example
     * // Create one News
     * const News = await prisma.news.create({
     *   data: {
     *     // ... data to create a News
     *   }
     * })
     * 
    **/
    create<T extends NewsCreateArgs>(
      args: SelectSubset<T, NewsCreateArgs>
    ): Prisma__NewsClient<NewsGetPayload<T>>

    /**
     * Create many News.
     *     @param {NewsCreateManyArgs} args - Arguments to create many News.
     *     @example
     *     // Create many News
     *     const news = await prisma.news.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NewsCreateManyArgs>(
      args?: SelectSubset<T, NewsCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a News.
     * @param {NewsDeleteArgs} args - Arguments to delete one News.
     * @example
     * // Delete one News
     * const News = await prisma.news.delete({
     *   where: {
     *     // ... filter to delete one News
     *   }
     * })
     * 
    **/
    delete<T extends NewsDeleteArgs>(
      args: SelectSubset<T, NewsDeleteArgs>
    ): Prisma__NewsClient<NewsGetPayload<T>>

    /**
     * Update one News.
     * @param {NewsUpdateArgs} args - Arguments to update one News.
     * @example
     * // Update one News
     * const news = await prisma.news.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NewsUpdateArgs>(
      args: SelectSubset<T, NewsUpdateArgs>
    ): Prisma__NewsClient<NewsGetPayload<T>>

    /**
     * Delete zero or more News.
     * @param {NewsDeleteManyArgs} args - Arguments to filter News to delete.
     * @example
     * // Delete a few News
     * const { count } = await prisma.news.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NewsDeleteManyArgs>(
      args?: SelectSubset<T, NewsDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more News.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many News
     * const news = await prisma.news.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NewsUpdateManyArgs>(
      args: SelectSubset<T, NewsUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one News.
     * @param {NewsUpsertArgs} args - Arguments to update or create a News.
     * @example
     * // Update or create a News
     * const news = await prisma.news.upsert({
     *   create: {
     *     // ... data to create a News
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the News we want to update
     *   }
     * })
    **/
    upsert<T extends NewsUpsertArgs>(
      args: SelectSubset<T, NewsUpsertArgs>
    ): Prisma__NewsClient<NewsGetPayload<T>>

    /**
     * Find zero or more News that matches the filter.
     * @param {NewsFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const news = await prisma.news.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: NewsFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a News.
     * @param {NewsAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const news = await prisma.news.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: NewsAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of News.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsCountArgs} args - Arguments to filter News to count.
     * @example
     * // Count the number of News
     * const count = await prisma.news.count({
     *   where: {
     *     // ... the filter for the News we want to count
     *   }
     * })
    **/
    count<T extends NewsCountArgs>(
      args?: Subset<T, NewsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NewsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a News.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NewsAggregateArgs>(args: Subset<T, NewsAggregateArgs>): Prisma.PrismaPromise<GetNewsAggregateType<T>>

    /**
     * Group by News.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NewsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NewsGroupByArgs['orderBy'] }
        : { orderBy?: NewsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NewsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNewsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for News.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__NewsClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * News base type for findUnique actions
   */
  export type NewsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect | null
    /**
     * Filter, which News to fetch.
     */
    where: NewsWhereUniqueInput
  }

  /**
   * News findUnique
   */
  export interface NewsFindUniqueArgs extends NewsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * News findUniqueOrThrow
   */
  export type NewsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect | null
    /**
     * Filter, which News to fetch.
     */
    where: NewsWhereUniqueInput
  }


  /**
   * News base type for findFirst actions
   */
  export type NewsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect | null
    /**
     * Filter, which News to fetch.
     */
    where?: NewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of News to fetch.
     */
    orderBy?: Enumerable<NewsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for News.
     */
    cursor?: NewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` News from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` News.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of News.
     */
    distinct?: Enumerable<NewsScalarFieldEnum>
  }

  /**
   * News findFirst
   */
  export interface NewsFindFirstArgs extends NewsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * News findFirstOrThrow
   */
  export type NewsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect | null
    /**
     * Filter, which News to fetch.
     */
    where?: NewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of News to fetch.
     */
    orderBy?: Enumerable<NewsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for News.
     */
    cursor?: NewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` News from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` News.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of News.
     */
    distinct?: Enumerable<NewsScalarFieldEnum>
  }


  /**
   * News findMany
   */
  export type NewsFindManyArgs = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect | null
    /**
     * Filter, which News to fetch.
     */
    where?: NewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of News to fetch.
     */
    orderBy?: Enumerable<NewsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing News.
     */
    cursor?: NewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` News from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` News.
     */
    skip?: number
    distinct?: Enumerable<NewsScalarFieldEnum>
  }


  /**
   * News create
   */
  export type NewsCreateArgs = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect | null
    /**
     * The data needed to create a News.
     */
    data: XOR<NewsCreateInput, NewsUncheckedCreateInput>
  }


  /**
   * News createMany
   */
  export type NewsCreateManyArgs = {
    /**
     * The data used to create many News.
     */
    data: Enumerable<NewsCreateManyInput>
  }


  /**
   * News update
   */
  export type NewsUpdateArgs = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect | null
    /**
     * The data needed to update a News.
     */
    data: XOR<NewsUpdateInput, NewsUncheckedUpdateInput>
    /**
     * Choose, which News to update.
     */
    where: NewsWhereUniqueInput
  }


  /**
   * News updateMany
   */
  export type NewsUpdateManyArgs = {
    /**
     * The data used to update News.
     */
    data: XOR<NewsUpdateManyMutationInput, NewsUncheckedUpdateManyInput>
    /**
     * Filter which News to update
     */
    where?: NewsWhereInput
  }


  /**
   * News upsert
   */
  export type NewsUpsertArgs = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect | null
    /**
     * The filter to search for the News to update in case it exists.
     */
    where: NewsWhereUniqueInput
    /**
     * In case the News found by the `where` argument doesn't exist, create a new News with this data.
     */
    create: XOR<NewsCreateInput, NewsUncheckedCreateInput>
    /**
     * In case the News was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NewsUpdateInput, NewsUncheckedUpdateInput>
  }


  /**
   * News delete
   */
  export type NewsDeleteArgs = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect | null
    /**
     * Filter which News to delete.
     */
    where: NewsWhereUniqueInput
  }


  /**
   * News deleteMany
   */
  export type NewsDeleteManyArgs = {
    /**
     * Filter which News to delete
     */
    where?: NewsWhereInput
  }


  /**
   * News findRaw
   */
  export type NewsFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * News aggregateRaw
   */
  export type NewsAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * News without action
   */
  export type NewsArgs = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect | null
  }



  /**
   * Enums
   */

  export const AppSettingsScalarFieldEnum: {
    id: 'id',
    notificationType: 'notificationType',
    name: 'name',
    oneSignalAppID: 'oneSignalAppID',
    oneSignalApiKey: 'oneSignalApiKey',
    firebaseServerKey: 'firebaseServerKey',
    firebaseTopics: 'firebaseTopics',
    sportsApiBasedUrl: 'sportsApiBasedUrl',
    sportsApiKey: 'sportsApiKey',
    androidSettings: 'androidSettings',
    iosSettings: 'iosSettings'
  };

  export type AppSettingsScalarFieldEnum = (typeof AppSettingsScalarFieldEnum)[keyof typeof AppSettingsScalarFieldEnum]


  export const HighlightScalarFieldEnum: {
    id: 'id',
    fixtureId: 'fixtureId',
    title: 'title',
    shortDescription: 'shortDescription',
    status: 'status',
    youtubeUrl: 'youtubeUrl',
    youtubeThumbnail: 'youtubeThumbnail',
    videoType: 'videoType',
    thumbnailType: 'thumbnailType',
    imageUrl: 'imageUrl',
    imageFile: 'imageFile'
  };

  export type HighlightScalarFieldEnum = (typeof HighlightScalarFieldEnum)[keyof typeof HighlightScalarFieldEnum]


  export const MatchScalarFieldEnum: {
    id: 'id',
    fixtureId: 'fixtureId',
    matchTime: 'matchTime',
    matchTitle: 'matchTitle',
    teamOneName: 'teamOneName',
    teamOneImage: 'teamOneImage',
    teamTwoName: 'teamTwoName',
    teamTwoImage: 'teamTwoImage',
    matchStatus: 'matchStatus'
  };

  export type MatchScalarFieldEnum = (typeof MatchScalarFieldEnum)[keyof typeof MatchScalarFieldEnum]


  export const NewsScalarFieldEnum: {
    id: 'id',
    title: 'title',
    image: 'image',
    date: 'date'
  };

  export type NewsScalarFieldEnum = (typeof NewsScalarFieldEnum)[keyof typeof NewsScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const StreamScalarFieldEnum: {
    id: 'id',
    matchId: 'matchId',
    streamTitle: 'streamTitle',
    isPremium: 'isPremium',
    resulation: 'resulation',
    platform: 'platform',
    portraitWatermark: 'portraitWatermark',
    landscapeWatermark: 'landscapeWatermark',
    streamType: 'streamType',
    streamUrl: 'streamUrl',
    headers: 'headers',
    streamKey: 'streamKey'
  };

  export type StreamScalarFieldEnum = (typeof StreamScalarFieldEnum)[keyof typeof StreamScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    adminType: 'adminType',
    emailVerified: 'emailVerified',
    image: 'image',
    salt: 'salt',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    name?: StringNullableFilter | string | null
    email?: StringFilter | string
    password?: StringFilter | string
    adminType?: StringNullableFilter | string | null
    emailVerified?: DateTimeNullableFilter | Date | string | null
    image?: StringNullableFilter | string | null
    salt?: StringNullableFilter | string | null
    status?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    adminType?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    salt?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: string
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    adminType?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    salt?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringNullableWithAggregatesFilter | string | null
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    adminType?: StringNullableWithAggregatesFilter | string | null
    emailVerified?: DateTimeNullableWithAggregatesFilter | Date | string | null
    image?: StringNullableWithAggregatesFilter | string | null
    salt?: StringNullableWithAggregatesFilter | string | null
    status?: BoolWithAggregatesFilter | boolean
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type MatchWhereInput = {
    AND?: Enumerable<MatchWhereInput>
    OR?: Enumerable<MatchWhereInput>
    NOT?: Enumerable<MatchWhereInput>
    id?: StringFilter | string
    fixtureId?: StringNullableFilter | string | null
    matchTime?: StringFilter | string
    matchTitle?: StringFilter | string
    teamOneName?: StringFilter | string
    teamOneImage?: StringFilter | string
    teamTwoName?: StringFilter | string
    teamTwoImage?: StringFilter | string
    matchStatus?: BoolFilter | boolean
    streamingSources?: StreamListRelationFilter
  }

  export type MatchOrderByWithRelationInput = {
    id?: SortOrder
    fixtureId?: SortOrder
    matchTime?: SortOrder
    matchTitle?: SortOrder
    teamOneName?: SortOrder
    teamOneImage?: SortOrder
    teamTwoName?: SortOrder
    teamTwoImage?: SortOrder
    matchStatus?: SortOrder
    streamingSources?: StreamOrderByRelationAggregateInput
  }

  export type MatchWhereUniqueInput = {
    id?: string
  }

  export type MatchOrderByWithAggregationInput = {
    id?: SortOrder
    fixtureId?: SortOrder
    matchTime?: SortOrder
    matchTitle?: SortOrder
    teamOneName?: SortOrder
    teamOneImage?: SortOrder
    teamTwoName?: SortOrder
    teamTwoImage?: SortOrder
    matchStatus?: SortOrder
    _count?: MatchCountOrderByAggregateInput
    _max?: MatchMaxOrderByAggregateInput
    _min?: MatchMinOrderByAggregateInput
  }

  export type MatchScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MatchScalarWhereWithAggregatesInput>
    OR?: Enumerable<MatchScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MatchScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    fixtureId?: StringNullableWithAggregatesFilter | string | null
    matchTime?: StringWithAggregatesFilter | string
    matchTitle?: StringWithAggregatesFilter | string
    teamOneName?: StringWithAggregatesFilter | string
    teamOneImage?: StringWithAggregatesFilter | string
    teamTwoName?: StringWithAggregatesFilter | string
    teamTwoImage?: StringWithAggregatesFilter | string
    matchStatus?: BoolWithAggregatesFilter | boolean
  }

  export type StreamWhereInput = {
    AND?: Enumerable<StreamWhereInput>
    OR?: Enumerable<StreamWhereInput>
    NOT?: Enumerable<StreamWhereInput>
    id?: StringFilter | string
    matchId?: StringFilter | string
    streamTitle?: StringFilter | string
    isPremium?: BoolFilter | boolean
    resulation?: StringFilter | string
    platform?: StringFilter | string
    portraitWatermark?: StringFilter | string
    landscapeWatermark?: StringFilter | string
    streamType?: EnumStreamTypeFilter | StreamType
    streamUrl?: StringNullableFilter | string | null
    headers?: StringNullableFilter | string | null
    streamKey?: StringNullableFilter | string | null
    match?: XOR<MatchRelationFilter, MatchWhereInput>
  }

  export type StreamOrderByWithRelationInput = {
    id?: SortOrder
    matchId?: SortOrder
    streamTitle?: SortOrder
    isPremium?: SortOrder
    resulation?: SortOrder
    platform?: SortOrder
    portraitWatermark?: SortOrder
    landscapeWatermark?: SortOrder
    streamType?: SortOrder
    streamUrl?: SortOrder
    headers?: SortOrder
    streamKey?: SortOrder
    match?: MatchOrderByWithRelationInput
  }

  export type StreamWhereUniqueInput = {
    id?: string
  }

  export type StreamOrderByWithAggregationInput = {
    id?: SortOrder
    matchId?: SortOrder
    streamTitle?: SortOrder
    isPremium?: SortOrder
    resulation?: SortOrder
    platform?: SortOrder
    portraitWatermark?: SortOrder
    landscapeWatermark?: SortOrder
    streamType?: SortOrder
    streamUrl?: SortOrder
    headers?: SortOrder
    streamKey?: SortOrder
    _count?: StreamCountOrderByAggregateInput
    _max?: StreamMaxOrderByAggregateInput
    _min?: StreamMinOrderByAggregateInput
  }

  export type StreamScalarWhereWithAggregatesInput = {
    AND?: Enumerable<StreamScalarWhereWithAggregatesInput>
    OR?: Enumerable<StreamScalarWhereWithAggregatesInput>
    NOT?: Enumerable<StreamScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    matchId?: StringWithAggregatesFilter | string
    streamTitle?: StringWithAggregatesFilter | string
    isPremium?: BoolWithAggregatesFilter | boolean
    resulation?: StringWithAggregatesFilter | string
    platform?: StringWithAggregatesFilter | string
    portraitWatermark?: StringWithAggregatesFilter | string
    landscapeWatermark?: StringWithAggregatesFilter | string
    streamType?: EnumStreamTypeWithAggregatesFilter | StreamType
    streamUrl?: StringNullableWithAggregatesFilter | string | null
    headers?: StringNullableWithAggregatesFilter | string | null
    streamKey?: StringNullableWithAggregatesFilter | string | null
  }

  export type HighlightWhereInput = {
    AND?: Enumerable<HighlightWhereInput>
    OR?: Enumerable<HighlightWhereInput>
    NOT?: Enumerable<HighlightWhereInput>
    id?: StringFilter | string
    fixtureId?: StringNullableFilter | string | null
    title?: StringFilter | string
    shortDescription?: StringNullableFilter | string | null
    status?: BoolFilter | boolean
    youtubeUrl?: StringNullableFilter | string | null
    youtubeThumbnail?: StringNullableFilter | string | null
    videoType?: EnumVideoTypeFilter | VideoType
    thumbnailType?: EnumThumbnailTypeFilter | ThumbnailType
    imageUrl?: StringNullableFilter | string | null
    imageFile?: StringNullableFilter | string | null
  }

  export type HighlightOrderByWithRelationInput = {
    id?: SortOrder
    fixtureId?: SortOrder
    title?: SortOrder
    shortDescription?: SortOrder
    status?: SortOrder
    youtubeUrl?: SortOrder
    youtubeThumbnail?: SortOrder
    videoType?: SortOrder
    thumbnailType?: SortOrder
    imageUrl?: SortOrder
    imageFile?: SortOrder
  }

  export type HighlightWhereUniqueInput = {
    id?: string
  }

  export type HighlightOrderByWithAggregationInput = {
    id?: SortOrder
    fixtureId?: SortOrder
    title?: SortOrder
    shortDescription?: SortOrder
    status?: SortOrder
    youtubeUrl?: SortOrder
    youtubeThumbnail?: SortOrder
    videoType?: SortOrder
    thumbnailType?: SortOrder
    imageUrl?: SortOrder
    imageFile?: SortOrder
    _count?: HighlightCountOrderByAggregateInput
    _max?: HighlightMaxOrderByAggregateInput
    _min?: HighlightMinOrderByAggregateInput
  }

  export type HighlightScalarWhereWithAggregatesInput = {
    AND?: Enumerable<HighlightScalarWhereWithAggregatesInput>
    OR?: Enumerable<HighlightScalarWhereWithAggregatesInput>
    NOT?: Enumerable<HighlightScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    fixtureId?: StringNullableWithAggregatesFilter | string | null
    title?: StringWithAggregatesFilter | string
    shortDescription?: StringNullableWithAggregatesFilter | string | null
    status?: BoolWithAggregatesFilter | boolean
    youtubeUrl?: StringNullableWithAggregatesFilter | string | null
    youtubeThumbnail?: StringNullableWithAggregatesFilter | string | null
    videoType?: EnumVideoTypeWithAggregatesFilter | VideoType
    thumbnailType?: EnumThumbnailTypeWithAggregatesFilter | ThumbnailType
    imageUrl?: StringNullableWithAggregatesFilter | string | null
    imageFile?: StringNullableWithAggregatesFilter | string | null
  }

  export type AppSettingsWhereInput = {
    AND?: Enumerable<AppSettingsWhereInput>
    OR?: Enumerable<AppSettingsWhereInput>
    NOT?: Enumerable<AppSettingsWhereInput>
    id?: StringFilter | string
    notificationType?: EnumNotificationTypeFilter | NotificationType
    name?: StringFilter | string
    oneSignalAppID?: StringNullableFilter | string | null
    oneSignalApiKey?: StringNullableFilter | string | null
    firebaseServerKey?: StringNullableFilter | string | null
    firebaseTopics?: StringNullableFilter | string | null
    sportsApiBasedUrl?: StringNullableFilter | string | null
    sportsApiKey?: StringNullableFilter | string | null
    androidSettings?: JsonNullableFilter
    iosSettings?: JsonNullableFilter
  }

  export type AppSettingsOrderByWithRelationInput = {
    id?: SortOrder
    notificationType?: SortOrder
    name?: SortOrder
    oneSignalAppID?: SortOrder
    oneSignalApiKey?: SortOrder
    firebaseServerKey?: SortOrder
    firebaseTopics?: SortOrder
    sportsApiBasedUrl?: SortOrder
    sportsApiKey?: SortOrder
    androidSettings?: SortOrder
    iosSettings?: SortOrder
  }

  export type AppSettingsWhereUniqueInput = {
    id?: string
    name?: string
  }

  export type AppSettingsOrderByWithAggregationInput = {
    id?: SortOrder
    notificationType?: SortOrder
    name?: SortOrder
    oneSignalAppID?: SortOrder
    oneSignalApiKey?: SortOrder
    firebaseServerKey?: SortOrder
    firebaseTopics?: SortOrder
    sportsApiBasedUrl?: SortOrder
    sportsApiKey?: SortOrder
    androidSettings?: SortOrder
    iosSettings?: SortOrder
    _count?: AppSettingsCountOrderByAggregateInput
    _max?: AppSettingsMaxOrderByAggregateInput
    _min?: AppSettingsMinOrderByAggregateInput
  }

  export type AppSettingsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AppSettingsScalarWhereWithAggregatesInput>
    OR?: Enumerable<AppSettingsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AppSettingsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    notificationType?: EnumNotificationTypeWithAggregatesFilter | NotificationType
    name?: StringWithAggregatesFilter | string
    oneSignalAppID?: StringNullableWithAggregatesFilter | string | null
    oneSignalApiKey?: StringNullableWithAggregatesFilter | string | null
    firebaseServerKey?: StringNullableWithAggregatesFilter | string | null
    firebaseTopics?: StringNullableWithAggregatesFilter | string | null
    sportsApiBasedUrl?: StringNullableWithAggregatesFilter | string | null
    sportsApiKey?: StringNullableWithAggregatesFilter | string | null
    androidSettings?: JsonNullableWithAggregatesFilter
    iosSettings?: JsonNullableWithAggregatesFilter
  }

  export type NewsWhereInput = {
    AND?: Enumerable<NewsWhereInput>
    OR?: Enumerable<NewsWhereInput>
    NOT?: Enumerable<NewsWhereInput>
    id?: StringFilter | string
    title?: StringFilter | string
    image?: StringFilter | string
    date?: DateTimeNullableFilter | Date | string | null
  }

  export type NewsOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    image?: SortOrder
    date?: SortOrder
  }

  export type NewsWhereUniqueInput = {
    id?: string
  }

  export type NewsOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    image?: SortOrder
    date?: SortOrder
    _count?: NewsCountOrderByAggregateInput
    _max?: NewsMaxOrderByAggregateInput
    _min?: NewsMinOrderByAggregateInput
  }

  export type NewsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<NewsScalarWhereWithAggregatesInput>
    OR?: Enumerable<NewsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<NewsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
    image?: StringWithAggregatesFilter | string
    date?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type UserCreateInput = {
    id?: string
    name?: string | null
    email: string
    password: string
    adminType?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    salt?: string | null
    status?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name?: string | null
    email: string
    password: string
    adminType?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    salt?: string | null
    status?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    adminType?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    salt?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    adminType?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    salt?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyInput = {
    id?: string
    name?: string | null
    email: string
    password: string
    adminType?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    salt?: string | null
    status?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    adminType?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    salt?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    adminType?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    salt?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchCreateInput = {
    id?: string
    fixtureId?: string | null
    matchTime: string
    matchTitle: string
    teamOneName: string
    teamOneImage: string
    teamTwoName: string
    teamTwoImage: string
    matchStatus: boolean
    streamingSources?: StreamCreateNestedManyWithoutMatchInput
  }

  export type MatchUncheckedCreateInput = {
    id?: string
    fixtureId?: string | null
    matchTime: string
    matchTitle: string
    teamOneName: string
    teamOneImage: string
    teamTwoName: string
    teamTwoImage: string
    matchStatus: boolean
    streamingSources?: StreamUncheckedCreateNestedManyWithoutMatchInput
  }

  export type MatchUpdateInput = {
    fixtureId?: NullableStringFieldUpdateOperationsInput | string | null
    matchTime?: StringFieldUpdateOperationsInput | string
    matchTitle?: StringFieldUpdateOperationsInput | string
    teamOneName?: StringFieldUpdateOperationsInput | string
    teamOneImage?: StringFieldUpdateOperationsInput | string
    teamTwoName?: StringFieldUpdateOperationsInput | string
    teamTwoImage?: StringFieldUpdateOperationsInput | string
    matchStatus?: BoolFieldUpdateOperationsInput | boolean
    streamingSources?: StreamUpdateManyWithoutMatchNestedInput
  }

  export type MatchUncheckedUpdateInput = {
    fixtureId?: NullableStringFieldUpdateOperationsInput | string | null
    matchTime?: StringFieldUpdateOperationsInput | string
    matchTitle?: StringFieldUpdateOperationsInput | string
    teamOneName?: StringFieldUpdateOperationsInput | string
    teamOneImage?: StringFieldUpdateOperationsInput | string
    teamTwoName?: StringFieldUpdateOperationsInput | string
    teamTwoImage?: StringFieldUpdateOperationsInput | string
    matchStatus?: BoolFieldUpdateOperationsInput | boolean
    streamingSources?: StreamUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type MatchCreateManyInput = {
    id?: string
    fixtureId?: string | null
    matchTime: string
    matchTitle: string
    teamOneName: string
    teamOneImage: string
    teamTwoName: string
    teamTwoImage: string
    matchStatus: boolean
  }

  export type MatchUpdateManyMutationInput = {
    fixtureId?: NullableStringFieldUpdateOperationsInput | string | null
    matchTime?: StringFieldUpdateOperationsInput | string
    matchTitle?: StringFieldUpdateOperationsInput | string
    teamOneName?: StringFieldUpdateOperationsInput | string
    teamOneImage?: StringFieldUpdateOperationsInput | string
    teamTwoName?: StringFieldUpdateOperationsInput | string
    teamTwoImage?: StringFieldUpdateOperationsInput | string
    matchStatus?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MatchUncheckedUpdateManyInput = {
    fixtureId?: NullableStringFieldUpdateOperationsInput | string | null
    matchTime?: StringFieldUpdateOperationsInput | string
    matchTitle?: StringFieldUpdateOperationsInput | string
    teamOneName?: StringFieldUpdateOperationsInput | string
    teamOneImage?: StringFieldUpdateOperationsInput | string
    teamTwoName?: StringFieldUpdateOperationsInput | string
    teamTwoImage?: StringFieldUpdateOperationsInput | string
    matchStatus?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StreamCreateInput = {
    id?: string
    streamTitle: string
    isPremium: boolean
    resulation: string
    platform: string
    portraitWatermark: string
    landscapeWatermark: string
    streamType?: StreamType
    streamUrl?: string | null
    headers?: string | null
    streamKey?: string | null
    match: MatchCreateNestedOneWithoutStreamingSourcesInput
  }

  export type StreamUncheckedCreateInput = {
    id?: string
    matchId: string
    streamTitle: string
    isPremium: boolean
    resulation: string
    platform: string
    portraitWatermark: string
    landscapeWatermark: string
    streamType?: StreamType
    streamUrl?: string | null
    headers?: string | null
    streamKey?: string | null
  }

  export type StreamUpdateInput = {
    streamTitle?: StringFieldUpdateOperationsInput | string
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    resulation?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    portraitWatermark?: StringFieldUpdateOperationsInput | string
    landscapeWatermark?: StringFieldUpdateOperationsInput | string
    streamType?: EnumStreamTypeFieldUpdateOperationsInput | StreamType
    streamUrl?: NullableStringFieldUpdateOperationsInput | string | null
    headers?: NullableStringFieldUpdateOperationsInput | string | null
    streamKey?: NullableStringFieldUpdateOperationsInput | string | null
    match?: MatchUpdateOneRequiredWithoutStreamingSourcesNestedInput
  }

  export type StreamUncheckedUpdateInput = {
    matchId?: StringFieldUpdateOperationsInput | string
    streamTitle?: StringFieldUpdateOperationsInput | string
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    resulation?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    portraitWatermark?: StringFieldUpdateOperationsInput | string
    landscapeWatermark?: StringFieldUpdateOperationsInput | string
    streamType?: EnumStreamTypeFieldUpdateOperationsInput | StreamType
    streamUrl?: NullableStringFieldUpdateOperationsInput | string | null
    headers?: NullableStringFieldUpdateOperationsInput | string | null
    streamKey?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StreamCreateManyInput = {
    id?: string
    matchId: string
    streamTitle: string
    isPremium: boolean
    resulation: string
    platform: string
    portraitWatermark: string
    landscapeWatermark: string
    streamType?: StreamType
    streamUrl?: string | null
    headers?: string | null
    streamKey?: string | null
  }

  export type StreamUpdateManyMutationInput = {
    streamTitle?: StringFieldUpdateOperationsInput | string
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    resulation?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    portraitWatermark?: StringFieldUpdateOperationsInput | string
    landscapeWatermark?: StringFieldUpdateOperationsInput | string
    streamType?: EnumStreamTypeFieldUpdateOperationsInput | StreamType
    streamUrl?: NullableStringFieldUpdateOperationsInput | string | null
    headers?: NullableStringFieldUpdateOperationsInput | string | null
    streamKey?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StreamUncheckedUpdateManyInput = {
    matchId?: StringFieldUpdateOperationsInput | string
    streamTitle?: StringFieldUpdateOperationsInput | string
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    resulation?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    portraitWatermark?: StringFieldUpdateOperationsInput | string
    landscapeWatermark?: StringFieldUpdateOperationsInput | string
    streamType?: EnumStreamTypeFieldUpdateOperationsInput | StreamType
    streamUrl?: NullableStringFieldUpdateOperationsInput | string | null
    headers?: NullableStringFieldUpdateOperationsInput | string | null
    streamKey?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HighlightCreateInput = {
    id?: string
    fixtureId?: string | null
    title: string
    shortDescription?: string | null
    status: boolean
    youtubeUrl?: string | null
    youtubeThumbnail?: string | null
    videoType?: VideoType
    thumbnailType?: ThumbnailType
    imageUrl?: string | null
    imageFile?: string | null
  }

  export type HighlightUncheckedCreateInput = {
    id?: string
    fixtureId?: string | null
    title: string
    shortDescription?: string | null
    status: boolean
    youtubeUrl?: string | null
    youtubeThumbnail?: string | null
    videoType?: VideoType
    thumbnailType?: ThumbnailType
    imageUrl?: string | null
    imageFile?: string | null
  }

  export type HighlightUpdateInput = {
    fixtureId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    youtubeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    youtubeThumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    videoType?: EnumVideoTypeFieldUpdateOperationsInput | VideoType
    thumbnailType?: EnumThumbnailTypeFieldUpdateOperationsInput | ThumbnailType
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageFile?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HighlightUncheckedUpdateInput = {
    fixtureId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    youtubeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    youtubeThumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    videoType?: EnumVideoTypeFieldUpdateOperationsInput | VideoType
    thumbnailType?: EnumThumbnailTypeFieldUpdateOperationsInput | ThumbnailType
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageFile?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HighlightCreateManyInput = {
    id?: string
    fixtureId?: string | null
    title: string
    shortDescription?: string | null
    status: boolean
    youtubeUrl?: string | null
    youtubeThumbnail?: string | null
    videoType?: VideoType
    thumbnailType?: ThumbnailType
    imageUrl?: string | null
    imageFile?: string | null
  }

  export type HighlightUpdateManyMutationInput = {
    fixtureId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    youtubeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    youtubeThumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    videoType?: EnumVideoTypeFieldUpdateOperationsInput | VideoType
    thumbnailType?: EnumThumbnailTypeFieldUpdateOperationsInput | ThumbnailType
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageFile?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HighlightUncheckedUpdateManyInput = {
    fixtureId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    youtubeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    youtubeThumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    videoType?: EnumVideoTypeFieldUpdateOperationsInput | VideoType
    thumbnailType?: EnumThumbnailTypeFieldUpdateOperationsInput | ThumbnailType
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageFile?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AppSettingsCreateInput = {
    id?: string
    notificationType?: NotificationType
    name?: string
    oneSignalAppID?: string | null
    oneSignalApiKey?: string | null
    firebaseServerKey?: string | null
    firebaseTopics?: string | null
    sportsApiBasedUrl?: string | null
    sportsApiKey?: string | null
    androidSettings?: InputJsonValue | null
    iosSettings?: InputJsonValue | null
  }

  export type AppSettingsUncheckedCreateInput = {
    id?: string
    notificationType?: NotificationType
    name?: string
    oneSignalAppID?: string | null
    oneSignalApiKey?: string | null
    firebaseServerKey?: string | null
    firebaseTopics?: string | null
    sportsApiBasedUrl?: string | null
    sportsApiKey?: string | null
    androidSettings?: InputJsonValue | null
    iosSettings?: InputJsonValue | null
  }

  export type AppSettingsUpdateInput = {
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | NotificationType
    name?: StringFieldUpdateOperationsInput | string
    oneSignalAppID?: NullableStringFieldUpdateOperationsInput | string | null
    oneSignalApiKey?: NullableStringFieldUpdateOperationsInput | string | null
    firebaseServerKey?: NullableStringFieldUpdateOperationsInput | string | null
    firebaseTopics?: NullableStringFieldUpdateOperationsInput | string | null
    sportsApiBasedUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sportsApiKey?: NullableStringFieldUpdateOperationsInput | string | null
    androidSettings?: InputJsonValue | InputJsonValue | null
    iosSettings?: InputJsonValue | InputJsonValue | null
  }

  export type AppSettingsUncheckedUpdateInput = {
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | NotificationType
    name?: StringFieldUpdateOperationsInput | string
    oneSignalAppID?: NullableStringFieldUpdateOperationsInput | string | null
    oneSignalApiKey?: NullableStringFieldUpdateOperationsInput | string | null
    firebaseServerKey?: NullableStringFieldUpdateOperationsInput | string | null
    firebaseTopics?: NullableStringFieldUpdateOperationsInput | string | null
    sportsApiBasedUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sportsApiKey?: NullableStringFieldUpdateOperationsInput | string | null
    androidSettings?: InputJsonValue | InputJsonValue | null
    iosSettings?: InputJsonValue | InputJsonValue | null
  }

  export type AppSettingsCreateManyInput = {
    id?: string
    notificationType?: NotificationType
    name?: string
    oneSignalAppID?: string | null
    oneSignalApiKey?: string | null
    firebaseServerKey?: string | null
    firebaseTopics?: string | null
    sportsApiBasedUrl?: string | null
    sportsApiKey?: string | null
    androidSettings?: InputJsonValue | null
    iosSettings?: InputJsonValue | null
  }

  export type AppSettingsUpdateManyMutationInput = {
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | NotificationType
    name?: StringFieldUpdateOperationsInput | string
    oneSignalAppID?: NullableStringFieldUpdateOperationsInput | string | null
    oneSignalApiKey?: NullableStringFieldUpdateOperationsInput | string | null
    firebaseServerKey?: NullableStringFieldUpdateOperationsInput | string | null
    firebaseTopics?: NullableStringFieldUpdateOperationsInput | string | null
    sportsApiBasedUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sportsApiKey?: NullableStringFieldUpdateOperationsInput | string | null
    androidSettings?: InputJsonValue | InputJsonValue | null
    iosSettings?: InputJsonValue | InputJsonValue | null
  }

  export type AppSettingsUncheckedUpdateManyInput = {
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | NotificationType
    name?: StringFieldUpdateOperationsInput | string
    oneSignalAppID?: NullableStringFieldUpdateOperationsInput | string | null
    oneSignalApiKey?: NullableStringFieldUpdateOperationsInput | string | null
    firebaseServerKey?: NullableStringFieldUpdateOperationsInput | string | null
    firebaseTopics?: NullableStringFieldUpdateOperationsInput | string | null
    sportsApiBasedUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sportsApiKey?: NullableStringFieldUpdateOperationsInput | string | null
    androidSettings?: InputJsonValue | InputJsonValue | null
    iosSettings?: InputJsonValue | InputJsonValue | null
  }

  export type NewsCreateInput = {
    id?: string
    title: string
    image: string
    date?: Date | string | null
  }

  export type NewsUncheckedCreateInput = {
    id?: string
    title: string
    image: string
    date?: Date | string | null
  }

  export type NewsUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NewsUncheckedUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NewsCreateManyInput = {
    id?: string
    title: string
    image: string
    date?: Date | string | null
  }

  export type NewsUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NewsUncheckedUpdateManyInput = {
    title?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
    isSet?: boolean
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
    isSet?: boolean
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    adminType?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    salt?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    adminType?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    salt?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    adminType?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    salt?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
    isSet?: boolean
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
    isSet?: boolean
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type StreamListRelationFilter = {
    every?: StreamWhereInput
    some?: StreamWhereInput
    none?: StreamWhereInput
  }

  export type StreamOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MatchCountOrderByAggregateInput = {
    id?: SortOrder
    fixtureId?: SortOrder
    matchTime?: SortOrder
    matchTitle?: SortOrder
    teamOneName?: SortOrder
    teamOneImage?: SortOrder
    teamTwoName?: SortOrder
    teamTwoImage?: SortOrder
    matchStatus?: SortOrder
  }

  export type MatchMaxOrderByAggregateInput = {
    id?: SortOrder
    fixtureId?: SortOrder
    matchTime?: SortOrder
    matchTitle?: SortOrder
    teamOneName?: SortOrder
    teamOneImage?: SortOrder
    teamTwoName?: SortOrder
    teamTwoImage?: SortOrder
    matchStatus?: SortOrder
  }

  export type MatchMinOrderByAggregateInput = {
    id?: SortOrder
    fixtureId?: SortOrder
    matchTime?: SortOrder
    matchTitle?: SortOrder
    teamOneName?: SortOrder
    teamOneImage?: SortOrder
    teamTwoName?: SortOrder
    teamTwoImage?: SortOrder
    matchStatus?: SortOrder
  }

  export type EnumStreamTypeFilter = {
    equals?: StreamType
    in?: Enumerable<StreamType>
    notIn?: Enumerable<StreamType>
    not?: NestedEnumStreamTypeFilter | StreamType
  }

  export type MatchRelationFilter = {
    is?: MatchWhereInput
    isNot?: MatchWhereInput
  }

  export type StreamCountOrderByAggregateInput = {
    id?: SortOrder
    matchId?: SortOrder
    streamTitle?: SortOrder
    isPremium?: SortOrder
    resulation?: SortOrder
    platform?: SortOrder
    portraitWatermark?: SortOrder
    landscapeWatermark?: SortOrder
    streamType?: SortOrder
    streamUrl?: SortOrder
    headers?: SortOrder
    streamKey?: SortOrder
  }

  export type StreamMaxOrderByAggregateInput = {
    id?: SortOrder
    matchId?: SortOrder
    streamTitle?: SortOrder
    isPremium?: SortOrder
    resulation?: SortOrder
    platform?: SortOrder
    portraitWatermark?: SortOrder
    landscapeWatermark?: SortOrder
    streamType?: SortOrder
    streamUrl?: SortOrder
    headers?: SortOrder
    streamKey?: SortOrder
  }

  export type StreamMinOrderByAggregateInput = {
    id?: SortOrder
    matchId?: SortOrder
    streamTitle?: SortOrder
    isPremium?: SortOrder
    resulation?: SortOrder
    platform?: SortOrder
    portraitWatermark?: SortOrder
    landscapeWatermark?: SortOrder
    streamType?: SortOrder
    streamUrl?: SortOrder
    headers?: SortOrder
    streamKey?: SortOrder
  }

  export type EnumStreamTypeWithAggregatesFilter = {
    equals?: StreamType
    in?: Enumerable<StreamType>
    notIn?: Enumerable<StreamType>
    not?: NestedEnumStreamTypeWithAggregatesFilter | StreamType
    _count?: NestedIntFilter
    _min?: NestedEnumStreamTypeFilter
    _max?: NestedEnumStreamTypeFilter
  }

  export type EnumVideoTypeFilter = {
    equals?: VideoType
    in?: Enumerable<VideoType>
    notIn?: Enumerable<VideoType>
    not?: NestedEnumVideoTypeFilter | VideoType
  }

  export type EnumThumbnailTypeFilter = {
    equals?: ThumbnailType
    in?: Enumerable<ThumbnailType>
    notIn?: Enumerable<ThumbnailType>
    not?: NestedEnumThumbnailTypeFilter | ThumbnailType
  }

  export type HighlightCountOrderByAggregateInput = {
    id?: SortOrder
    fixtureId?: SortOrder
    title?: SortOrder
    shortDescription?: SortOrder
    status?: SortOrder
    youtubeUrl?: SortOrder
    youtubeThumbnail?: SortOrder
    videoType?: SortOrder
    thumbnailType?: SortOrder
    imageUrl?: SortOrder
    imageFile?: SortOrder
  }

  export type HighlightMaxOrderByAggregateInput = {
    id?: SortOrder
    fixtureId?: SortOrder
    title?: SortOrder
    shortDescription?: SortOrder
    status?: SortOrder
    youtubeUrl?: SortOrder
    youtubeThumbnail?: SortOrder
    videoType?: SortOrder
    thumbnailType?: SortOrder
    imageUrl?: SortOrder
    imageFile?: SortOrder
  }

  export type HighlightMinOrderByAggregateInput = {
    id?: SortOrder
    fixtureId?: SortOrder
    title?: SortOrder
    shortDescription?: SortOrder
    status?: SortOrder
    youtubeUrl?: SortOrder
    youtubeThumbnail?: SortOrder
    videoType?: SortOrder
    thumbnailType?: SortOrder
    imageUrl?: SortOrder
    imageFile?: SortOrder
  }

  export type EnumVideoTypeWithAggregatesFilter = {
    equals?: VideoType
    in?: Enumerable<VideoType>
    notIn?: Enumerable<VideoType>
    not?: NestedEnumVideoTypeWithAggregatesFilter | VideoType
    _count?: NestedIntFilter
    _min?: NestedEnumVideoTypeFilter
    _max?: NestedEnumVideoTypeFilter
  }

  export type EnumThumbnailTypeWithAggregatesFilter = {
    equals?: ThumbnailType
    in?: Enumerable<ThumbnailType>
    notIn?: Enumerable<ThumbnailType>
    not?: NestedEnumThumbnailTypeWithAggregatesFilter | ThumbnailType
    _count?: NestedIntFilter
    _min?: NestedEnumThumbnailTypeFilter
    _max?: NestedEnumThumbnailTypeFilter
  }

  export type EnumNotificationTypeFilter = {
    equals?: NotificationType
    in?: Enumerable<NotificationType>
    notIn?: Enumerable<NotificationType>
    not?: NestedEnumNotificationTypeFilter | NotificationType
  }
  export type JsonNullableFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase>, Exclude<keyof Required<JsonNullableFilterBase>, 'path'>>,
        Required<JsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase>, 'path'>>

  export type JsonNullableFilterBase = {
    equals?: InputJsonValue | null
    not?: InputJsonValue | null
    isSet?: boolean
  }

  export type AppSettingsCountOrderByAggregateInput = {
    id?: SortOrder
    notificationType?: SortOrder
    name?: SortOrder
    oneSignalAppID?: SortOrder
    oneSignalApiKey?: SortOrder
    firebaseServerKey?: SortOrder
    firebaseTopics?: SortOrder
    sportsApiBasedUrl?: SortOrder
    sportsApiKey?: SortOrder
    androidSettings?: SortOrder
    iosSettings?: SortOrder
  }

  export type AppSettingsMaxOrderByAggregateInput = {
    id?: SortOrder
    notificationType?: SortOrder
    name?: SortOrder
    oneSignalAppID?: SortOrder
    oneSignalApiKey?: SortOrder
    firebaseServerKey?: SortOrder
    firebaseTopics?: SortOrder
    sportsApiBasedUrl?: SortOrder
    sportsApiKey?: SortOrder
  }

  export type AppSettingsMinOrderByAggregateInput = {
    id?: SortOrder
    notificationType?: SortOrder
    name?: SortOrder
    oneSignalAppID?: SortOrder
    oneSignalApiKey?: SortOrder
    firebaseServerKey?: SortOrder
    firebaseTopics?: SortOrder
    sportsApiBasedUrl?: SortOrder
    sportsApiKey?: SortOrder
  }

  export type EnumNotificationTypeWithAggregatesFilter = {
    equals?: NotificationType
    in?: Enumerable<NotificationType>
    notIn?: Enumerable<NotificationType>
    not?: NestedEnumNotificationTypeWithAggregatesFilter | NotificationType
    _count?: NestedIntFilter
    _min?: NestedEnumNotificationTypeFilter
    _max?: NestedEnumNotificationTypeFilter
  }
  export type JsonNullableWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase = {
    equals?: InputJsonValue | null
    not?: InputJsonValue | null
    _count?: NestedIntNullableFilter
    _min?: NestedJsonNullableFilter
    _max?: NestedJsonNullableFilter
    isSet?: boolean
  }

  export type NewsCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    image?: SortOrder
    date?: SortOrder
  }

  export type NewsMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    image?: SortOrder
    date?: SortOrder
  }

  export type NewsMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    image?: SortOrder
    date?: SortOrder
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
    unset?: boolean
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
    unset?: boolean
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StreamCreateNestedManyWithoutMatchInput = {
    create?: XOR<Enumerable<StreamCreateWithoutMatchInput>, Enumerable<StreamUncheckedCreateWithoutMatchInput>>
    connectOrCreate?: Enumerable<StreamCreateOrConnectWithoutMatchInput>
    createMany?: StreamCreateManyMatchInputEnvelope
    connect?: Enumerable<StreamWhereUniqueInput>
  }

  export type StreamUncheckedCreateNestedManyWithoutMatchInput = {
    create?: XOR<Enumerable<StreamCreateWithoutMatchInput>, Enumerable<StreamUncheckedCreateWithoutMatchInput>>
    connectOrCreate?: Enumerable<StreamCreateOrConnectWithoutMatchInput>
    createMany?: StreamCreateManyMatchInputEnvelope
    connect?: Enumerable<StreamWhereUniqueInput>
  }

  export type StreamUpdateManyWithoutMatchNestedInput = {
    create?: XOR<Enumerable<StreamCreateWithoutMatchInput>, Enumerable<StreamUncheckedCreateWithoutMatchInput>>
    connectOrCreate?: Enumerable<StreamCreateOrConnectWithoutMatchInput>
    upsert?: Enumerable<StreamUpsertWithWhereUniqueWithoutMatchInput>
    createMany?: StreamCreateManyMatchInputEnvelope
    set?: Enumerable<StreamWhereUniqueInput>
    disconnect?: Enumerable<StreamWhereUniqueInput>
    delete?: Enumerable<StreamWhereUniqueInput>
    connect?: Enumerable<StreamWhereUniqueInput>
    update?: Enumerable<StreamUpdateWithWhereUniqueWithoutMatchInput>
    updateMany?: Enumerable<StreamUpdateManyWithWhereWithoutMatchInput>
    deleteMany?: Enumerable<StreamScalarWhereInput>
  }

  export type StreamUncheckedUpdateManyWithoutMatchNestedInput = {
    create?: XOR<Enumerable<StreamCreateWithoutMatchInput>, Enumerable<StreamUncheckedCreateWithoutMatchInput>>
    connectOrCreate?: Enumerable<StreamCreateOrConnectWithoutMatchInput>
    upsert?: Enumerable<StreamUpsertWithWhereUniqueWithoutMatchInput>
    createMany?: StreamCreateManyMatchInputEnvelope
    set?: Enumerable<StreamWhereUniqueInput>
    disconnect?: Enumerable<StreamWhereUniqueInput>
    delete?: Enumerable<StreamWhereUniqueInput>
    connect?: Enumerable<StreamWhereUniqueInput>
    update?: Enumerable<StreamUpdateWithWhereUniqueWithoutMatchInput>
    updateMany?: Enumerable<StreamUpdateManyWithWhereWithoutMatchInput>
    deleteMany?: Enumerable<StreamScalarWhereInput>
  }

  export type MatchCreateNestedOneWithoutStreamingSourcesInput = {
    create?: XOR<MatchCreateWithoutStreamingSourcesInput, MatchUncheckedCreateWithoutStreamingSourcesInput>
    connectOrCreate?: MatchCreateOrConnectWithoutStreamingSourcesInput
    connect?: MatchWhereUniqueInput
  }

  export type EnumStreamTypeFieldUpdateOperationsInput = {
    set?: StreamType
  }

  export type MatchUpdateOneRequiredWithoutStreamingSourcesNestedInput = {
    create?: XOR<MatchCreateWithoutStreamingSourcesInput, MatchUncheckedCreateWithoutStreamingSourcesInput>
    connectOrCreate?: MatchCreateOrConnectWithoutStreamingSourcesInput
    upsert?: MatchUpsertWithoutStreamingSourcesInput
    connect?: MatchWhereUniqueInput
    update?: XOR<MatchUpdateWithoutStreamingSourcesInput, MatchUncheckedUpdateWithoutStreamingSourcesInput>
  }

  export type EnumVideoTypeFieldUpdateOperationsInput = {
    set?: VideoType
  }

  export type EnumThumbnailTypeFieldUpdateOperationsInput = {
    set?: ThumbnailType
  }

  export type EnumNotificationTypeFieldUpdateOperationsInput = {
    set?: NotificationType
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
    isSet?: boolean
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
    isSet?: boolean
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
    isSet?: boolean
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
    isSet?: boolean
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
    isSet?: boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedEnumStreamTypeFilter = {
    equals?: StreamType
    in?: Enumerable<StreamType>
    notIn?: Enumerable<StreamType>
    not?: NestedEnumStreamTypeFilter | StreamType
  }

  export type NestedEnumStreamTypeWithAggregatesFilter = {
    equals?: StreamType
    in?: Enumerable<StreamType>
    notIn?: Enumerable<StreamType>
    not?: NestedEnumStreamTypeWithAggregatesFilter | StreamType
    _count?: NestedIntFilter
    _min?: NestedEnumStreamTypeFilter
    _max?: NestedEnumStreamTypeFilter
  }

  export type NestedEnumVideoTypeFilter = {
    equals?: VideoType
    in?: Enumerable<VideoType>
    notIn?: Enumerable<VideoType>
    not?: NestedEnumVideoTypeFilter | VideoType
  }

  export type NestedEnumThumbnailTypeFilter = {
    equals?: ThumbnailType
    in?: Enumerable<ThumbnailType>
    notIn?: Enumerable<ThumbnailType>
    not?: NestedEnumThumbnailTypeFilter | ThumbnailType
  }

  export type NestedEnumVideoTypeWithAggregatesFilter = {
    equals?: VideoType
    in?: Enumerable<VideoType>
    notIn?: Enumerable<VideoType>
    not?: NestedEnumVideoTypeWithAggregatesFilter | VideoType
    _count?: NestedIntFilter
    _min?: NestedEnumVideoTypeFilter
    _max?: NestedEnumVideoTypeFilter
  }

  export type NestedEnumThumbnailTypeWithAggregatesFilter = {
    equals?: ThumbnailType
    in?: Enumerable<ThumbnailType>
    notIn?: Enumerable<ThumbnailType>
    not?: NestedEnumThumbnailTypeWithAggregatesFilter | ThumbnailType
    _count?: NestedIntFilter
    _min?: NestedEnumThumbnailTypeFilter
    _max?: NestedEnumThumbnailTypeFilter
  }

  export type NestedEnumNotificationTypeFilter = {
    equals?: NotificationType
    in?: Enumerable<NotificationType>
    notIn?: Enumerable<NotificationType>
    not?: NestedEnumNotificationTypeFilter | NotificationType
  }

  export type NestedEnumNotificationTypeWithAggregatesFilter = {
    equals?: NotificationType
    in?: Enumerable<NotificationType>
    notIn?: Enumerable<NotificationType>
    not?: NestedEnumNotificationTypeWithAggregatesFilter | NotificationType
    _count?: NestedIntFilter
    _min?: NestedEnumNotificationTypeFilter
    _max?: NestedEnumNotificationTypeFilter
  }
  export type NestedJsonNullableFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase>, Exclude<keyof Required<NestedJsonNullableFilterBase>, 'path'>>,
        Required<NestedJsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase>, 'path'>>

  export type NestedJsonNullableFilterBase = {
    equals?: InputJsonValue | null
    not?: InputJsonValue | null
    isSet?: boolean
  }

  export type StreamCreateWithoutMatchInput = {
    id?: string
    streamTitle: string
    isPremium: boolean
    resulation: string
    platform: string
    portraitWatermark: string
    landscapeWatermark: string
    streamType?: StreamType
    streamUrl?: string | null
    headers?: string | null
    streamKey?: string | null
  }

  export type StreamUncheckedCreateWithoutMatchInput = {
    id?: string
    streamTitle: string
    isPremium: boolean
    resulation: string
    platform: string
    portraitWatermark: string
    landscapeWatermark: string
    streamType?: StreamType
    streamUrl?: string | null
    headers?: string | null
    streamKey?: string | null
  }

  export type StreamCreateOrConnectWithoutMatchInput = {
    where: StreamWhereUniqueInput
    create: XOR<StreamCreateWithoutMatchInput, StreamUncheckedCreateWithoutMatchInput>
  }

  export type StreamCreateManyMatchInputEnvelope = {
    data: Enumerable<StreamCreateManyMatchInput>
  }

  export type StreamUpsertWithWhereUniqueWithoutMatchInput = {
    where: StreamWhereUniqueInput
    update: XOR<StreamUpdateWithoutMatchInput, StreamUncheckedUpdateWithoutMatchInput>
    create: XOR<StreamCreateWithoutMatchInput, StreamUncheckedCreateWithoutMatchInput>
  }

  export type StreamUpdateWithWhereUniqueWithoutMatchInput = {
    where: StreamWhereUniqueInput
    data: XOR<StreamUpdateWithoutMatchInput, StreamUncheckedUpdateWithoutMatchInput>
  }

  export type StreamUpdateManyWithWhereWithoutMatchInput = {
    where: StreamScalarWhereInput
    data: XOR<StreamUpdateManyMutationInput, StreamUncheckedUpdateManyWithoutStreamingSourcesInput>
  }

  export type StreamScalarWhereInput = {
    AND?: Enumerable<StreamScalarWhereInput>
    OR?: Enumerable<StreamScalarWhereInput>
    NOT?: Enumerable<StreamScalarWhereInput>
    id?: StringFilter | string
    matchId?: StringFilter | string
    streamTitle?: StringFilter | string
    isPremium?: BoolFilter | boolean
    resulation?: StringFilter | string
    platform?: StringFilter | string
    portraitWatermark?: StringFilter | string
    landscapeWatermark?: StringFilter | string
    streamType?: EnumStreamTypeFilter | StreamType
    streamUrl?: StringNullableFilter | string | null
    headers?: StringNullableFilter | string | null
    streamKey?: StringNullableFilter | string | null
  }

  export type MatchCreateWithoutStreamingSourcesInput = {
    id?: string
    fixtureId?: string | null
    matchTime: string
    matchTitle: string
    teamOneName: string
    teamOneImage: string
    teamTwoName: string
    teamTwoImage: string
    matchStatus: boolean
  }

  export type MatchUncheckedCreateWithoutStreamingSourcesInput = {
    id?: string
    fixtureId?: string | null
    matchTime: string
    matchTitle: string
    teamOneName: string
    teamOneImage: string
    teamTwoName: string
    teamTwoImage: string
    matchStatus: boolean
  }

  export type MatchCreateOrConnectWithoutStreamingSourcesInput = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutStreamingSourcesInput, MatchUncheckedCreateWithoutStreamingSourcesInput>
  }

  export type MatchUpsertWithoutStreamingSourcesInput = {
    update: XOR<MatchUpdateWithoutStreamingSourcesInput, MatchUncheckedUpdateWithoutStreamingSourcesInput>
    create: XOR<MatchCreateWithoutStreamingSourcesInput, MatchUncheckedCreateWithoutStreamingSourcesInput>
  }

  export type MatchUpdateWithoutStreamingSourcesInput = {
    fixtureId?: NullableStringFieldUpdateOperationsInput | string | null
    matchTime?: StringFieldUpdateOperationsInput | string
    matchTitle?: StringFieldUpdateOperationsInput | string
    teamOneName?: StringFieldUpdateOperationsInput | string
    teamOneImage?: StringFieldUpdateOperationsInput | string
    teamTwoName?: StringFieldUpdateOperationsInput | string
    teamTwoImage?: StringFieldUpdateOperationsInput | string
    matchStatus?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MatchUncheckedUpdateWithoutStreamingSourcesInput = {
    fixtureId?: NullableStringFieldUpdateOperationsInput | string | null
    matchTime?: StringFieldUpdateOperationsInput | string
    matchTitle?: StringFieldUpdateOperationsInput | string
    teamOneName?: StringFieldUpdateOperationsInput | string
    teamOneImage?: StringFieldUpdateOperationsInput | string
    teamTwoName?: StringFieldUpdateOperationsInput | string
    teamTwoImage?: StringFieldUpdateOperationsInput | string
    matchStatus?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StreamCreateManyMatchInput = {
    id?: string
    streamTitle: string
    isPremium: boolean
    resulation: string
    platform: string
    portraitWatermark: string
    landscapeWatermark: string
    streamType?: StreamType
    streamUrl?: string | null
    headers?: string | null
    streamKey?: string | null
  }

  export type StreamUpdateWithoutMatchInput = {
    streamTitle?: StringFieldUpdateOperationsInput | string
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    resulation?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    portraitWatermark?: StringFieldUpdateOperationsInput | string
    landscapeWatermark?: StringFieldUpdateOperationsInput | string
    streamType?: EnumStreamTypeFieldUpdateOperationsInput | StreamType
    streamUrl?: NullableStringFieldUpdateOperationsInput | string | null
    headers?: NullableStringFieldUpdateOperationsInput | string | null
    streamKey?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StreamUncheckedUpdateWithoutMatchInput = {
    streamTitle?: StringFieldUpdateOperationsInput | string
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    resulation?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    portraitWatermark?: StringFieldUpdateOperationsInput | string
    landscapeWatermark?: StringFieldUpdateOperationsInput | string
    streamType?: EnumStreamTypeFieldUpdateOperationsInput | StreamType
    streamUrl?: NullableStringFieldUpdateOperationsInput | string | null
    headers?: NullableStringFieldUpdateOperationsInput | string | null
    streamKey?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StreamUncheckedUpdateManyWithoutStreamingSourcesInput = {
    streamTitle?: StringFieldUpdateOperationsInput | string
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    resulation?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    portraitWatermark?: StringFieldUpdateOperationsInput | string
    landscapeWatermark?: StringFieldUpdateOperationsInput | string
    streamType?: EnumStreamTypeFieldUpdateOperationsInput | StreamType
    streamUrl?: NullableStringFieldUpdateOperationsInput | string | null
    headers?: NullableStringFieldUpdateOperationsInput | string | null
    streamKey?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}